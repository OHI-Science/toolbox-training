[
["index.html", "Ocean Health Index Toolbox Training Chapter 1 Overview", " Ocean Health Index Toolbox Training Ocean Health Index Team 2017-02-15 Chapter 1 Overview TODO, including: first X chapters are overview of the workflow, independent from Toolbox next X chapters are Tbx specific "],
["introduction.html", "Chapter 2 Introduction 2.1 Overview 2.2 OHI conceptually 2.3 Best practices", " Chapter 2 Introduction TODO: intro to OHI conceptually, Tbx stuff. See Best Practices paper. 2.1 Overview how you move from conceptual planning to data and models in the Tbx, reference points. best practices: core and tailorable parts 2.2 OHI conceptually 2.3 Best practices "],
["workflow.html", "Chapter 3 Workflow 3.1 OHI+ Repo 3.2 RStudio-GitHub workflow 3.3 How you work 3.4 Developing these skills", " Chapter 3 Workflow what you get in the OHI+ repo (very high-level: you get data and code, you’ll operate with an R package ohicore) use RStudio, GitHub to work reproducibly and collaboratively how you work 3.1 OHI+ Repo what is in the OHI+ repo, not file-by-file, but high-level 3.2 RStudio-GitHub workflow 3.3 How you work commit often (i.e. bundled as tasks you complete) use the Git tab to help you check your work – what files updated, does that make sense? 3.4 Developing these skills 2-day self-paced workshop: Reproducible Science with RStudio and GitHub. This is a Software Carpentry workshop by our team to help you develop skills with the RStudio/GitHub workflow. "],
["toolbox-ecosystem.html", "Chapter 4 Toolbox Ecosystem 4.1 Overview 4.2 Files and organization 4.3 ohicore", " Chapter 4 Toolbox Ecosystem 4.1 Overview will identify files, their purpose, organization, and how they work together. TODISCUSS: make a table with rows=file, cols=location,purpose,how they contribute how they interact with ohicore 4.2 Files and organization … all the files, take from manual… see also https://github.com/OHI-Science/ohi-webapps/blob/master/startup_instructions.rmd 4.2.1 functions.r goal models are R functions. Each function has status and trend. 4.3 ohicore "],
["preparing-data.html", "Chapter 5 Preparing data 5.1 Overview 5.2 Data layer formatting 5.3 Data wrangling 5.4 Save and register data layer", " Chapter 5 Preparing data 5.1 Overview ‘data layer’ and formatting requirements preparing data reproducibly save and register 5.2 Data layer formatting show what final formatting should be 5.3 Data wrangling in R or better, in RMarkdown 5.4 Save and register data layer "],
["calculating-scores.html", "Chapter 6 Calculating scores 6.1 Overview 6.2 calculate_scores.r workflow 6.3 Installing ohicore 6.4 Substituting new data layers 6.5 Source configure_toolbox.r 6.6 Developing goal models 6.7 Removing goals 6.8 Changing subgoals", " Chapter 6 Calculating scores 6.1 Overview TODO:: calculate_scores.r workflow, requires ohicore. substituting new data layers in current goal models developing goal models and adding new data layers removing goals In this section, we won’t be modifying goal models yet. Instead, we will get you familiar with the construct of functions.R and the sequence of events required to calculate scores. This means we’ll take the data layer that you just prepared 5 and follow these steps to calculate scores: Confirm that data layers are saved and registered. See 5 Load ohicore and check data layers in configure_toolbox.r Calculate goal scores in conf/functions.r load data (functions.r) calculate status scores (functions.r) calculate trend scores (functions.r) combine status and trend scores (functions.r) check and possibly update how the function is called in conf/goals.csv calculate the remaining component of OHI scores in calculate_scores.r We will go through each of the scripts mentioned above. Here is a general structure to show where those files are in relation to the entire calculation process: TODO @ningningj: this figure may be more clear here if the red boxes are removed and instead placed around the green top pieces “modify goal models” and “calculate scores”? @jules32: i didn’t do that because we are not updating pressures and resilience. but your point is totally valid. i updated the figure as below, highlighting only the steps and scripts used here. what do you think? Now let’s get started and give it a try! 6.2 calculate_scores.r workflow a lot of shuffling and bookkeeping. what you get when you run calculate_scores.r runs the status, trend in functions.r, but also calculates pressures, resilience, lfs, and overall scores. score.csv updated, check that in Git tab of RStudio goals.csv 6.2.1 Calculate overall scores TODISCUSS @ningningj/@jules32: I think we’ll want to make this a distinct thing that also includes pressures/resilience, etc, whereas they’ve just been walking through the status/trend for a single goal model above. Does that make sense? We can think of the organization… @jules32: umm did you mean that it’s confusing to mention pressures/resilience here too, since we only walked through status/trend? i agree. what if we say it like this: Hooray! You just walked through the status and trend calcuation for a single goal model. Let’s take a look at how adding new data layers has changed the goal score. This is done in calculate_scores.r OLD TEXT: Hooray you’ve modified a goal function! Now let’s calculate the remaining score components (pressures, resilience, likely future state, and overall score). We’ll learn how to modify Pressures and Resilience matrix in a different chapter. 6.2.2 Try it out # calculate scenario scores scores = CalculateAll(conf, layers, debug=F) # save scores as .csv file, tables and figures write.csv(scores, &#39;scores.csv&#39;, na=&#39;&#39;, row.names=F) After the calculation is done, you should be able to see the compiled score sheet for all goals in all regions in sub-country/scores.csv. It is very likely that during the CalculateAll process you’ll encounter problems and see error messages. In most cases, the error messages can specify what the error is and in which step it occurs, which should be helpful for trouble shooting. Some commonly occurring errors and how to fix them can be found in the Troubleshooting section of the manual. Tip: whenever there are changes made (addition, deletion, changes in .csv or r script), you would be notified in the Git window. So here, since you added a new data layer and/more modified a function, and are expecting changes in score.csv, you should see it in Git. This is a good place to double check whether you have made the right changes. 6.3 Installing ohicore what is ohicore and how does it operate with my ohi+ repo? ohicore is a package developed by our team that contains all the essential functions and supporting packages you will use to calculate the final OHI scores. By installing ohicore and calling it from your ohi+ assessment repository, you gain access to all those funcitons and packages. ohicore comes into play when you calculate overall goal scores. How to install?: (this should be in a separate tutorial… eg. preparte your toolbox?) To install, open and source the script install_ohicore.r in your scenario folder (ie. your regionYEAR folder). This only needs to be done once at the beginning of your assessment, and you do not need to rerun it again during an assessment. 6.4 Substituting new data layers and learning about functions 6.5 Source configure_toolbox.r Now you have fully prepared and registered the data with the Toolbox, there is just one more step before calculations! We have to make sure everything is properly configured for the Toolbox: This script combines everything required to calculate OHI scores and checks that they are properly formatted, and will minimize potential errors down the line. It makes sure that your data and goal models are ready to be used to calculate scores. TODO @ningningj/@jules32: add section/language about how to interpret errors: errors are identifying YOUR problems, not ohicore’s (said in a nicer way) @jules32: see below under step 3. Ning’s edits: More specifically, sourcing configure_toolbox.r will: load the necessary R packages, including ohicore load scenario configurations. TODO @ningningj: I think we need to write out what ohicore::Conf('conf') etc are doing, this is too vague; Ning’s edits: This step links together all the data layers (for goal, pressures, resilience), goal functions, and other OHI parameters that determines how ohi scores are calculated @jules32: I also added this language to configure_toolbox.R directly. since people will follow along in that script. check that data layers are properly formatted and registered Ning’s edits: This is a gate-keeping step by ohicore to make sure the data layers you’ve entered are in the right format and can be read by ohicore properly. You’ll likely encounter error messages. These messages intend to alert you that there are errors in data entry. Some common errors are: - registration error. data layer name doesn’t match what’s been registered under “file name” in layers.R - missing comuns (eg. region id) …? load data layers so that you can call them in functions.r Note: repeat this step whenever you save a new data layer or change a goal function. **TODO @ningningj: this is a really important point, should not be a note but a statement, and probably in the bigger overview above; Tip: “Source” to run all the lines 6.5.1 Explore goal model Now you are ready to examine the goal model in functions.r and confirm that your data layer is appropriately called. functions.r is in the conf folder. TODO @ningningj/@jules32: more here Open functions.r, go to the appropriate goal function. We will use Artisanal Fishing Opportunity (AO) as an example. Tip: Clicking the bottom left corner of Console will show you a drop-down menu of all functions. It’s a shortcut to jump to the appropriate section or goal model. TODO @ningningj: see note above but this needs to be more prominent TODO @ningningj/@jules32: develop paragraphs from these bullets: Ning’s edits: functions.r has goal models for each goal in the assessment. Each goal model is an individual R function that calculates status and trend, and you will modify the goal model within the confines of each function. Each function contains these steps: load data layers, calculate status, calculate trend, combine status and trend. Destails of each step is further explained below. functions.r in your Full Repo are populated with R code from the most recent OHI global assessment as a starting place. You can run through the reference script line-by-line to learn how it has been done. Now we’ll use Artisanal Fishing Opportunity goal as an example. 6.5.2 SelectLayersData Run this chunk of code and the data layers will be loaded, joined, and ready to be manipulated further: TODO @ningningj/@jules32: SelectLayersData is from ohicore, what it’s doing… @jules32: See inline comments. I updated them in functions.r in demo repo too. might be easier to follow there. ## &quot;SelectLayersData&quot; is an ohicore funtion to call the appropriate data layer by its layer name registered in`layers.csv` (eg. &quot;ao_access&quot;) ## &quot;select&quot;&quot; is a function from the dplyr package to let you select only the columns you would need r &lt;- SelectLayersData(layers, layers = &#39;ao_access&#39;, narrow=TRUE) %&gt;% select(region_id=id_num, access=val_num) r &lt;- na.omit(r) ry &lt;- SelectLayersData(layers, layers = &#39;ao_need&#39;, narrow=TRUE) %&gt;% select(region_id = id_num, year, need=val_num) %&gt;% left_join(r, by=&quot;region_id&quot;) Tip: it’s always a good idea to check what your data looks like and make sure there are no glaring errors. A couple of commonly used functions are: head() and str() 6.5.3 Calculate status Once you make sure your raw data have been loaded and joined in the right format, you can start calculate status scores! TODO @ningningj/@jules32: this syntax uses the tidyverse and chaining…look xxx to learn more # model: this step calculates status scores of all years, using the goal model. ## &quot;mutate&quot; is another commonly used function from dplyr that allows you to add a new column to the data frame ## Note that &quot;Sustainability&quot; and &quot;status_year&quot; have been defined at the start of the AO function Sustainability=1.0 status_year = 2015 ry &lt;- ry %&gt;% mutate(Du = (1 - need) * (1 - access)) %&gt;% mutate(status = (1 - Du) * Sustainability) # status: status scores are typically the most recent year of all the years you have calculated. r.status &lt;- ry %&gt;% filter(year==status_year) %&gt;% select(region_id, status) %&gt;% mutate(status=status*100) 6.5.4 Calculate trend Trend scores are typically based on linear regression of status scores from the most recent five years. # choose trend years (eg. most recent five years) trend_years &lt;- (status_year-4):(status_year) adj_trend_year &lt;- min(trend_years) r.trend = ry %&gt;% group_by(region_id) %&gt;% # linear model: do(mdl = lm(status ~ year, data=., subset=year %in% trend_years), adjust_trend = .$status[.$year == adj_trend_year]) %&gt;% # extract the coefficient of year and produce a trend score summarize(region_id, trend = ifelse(coef(mdl)[&#39;year&#39;]==0, 0, coef(mdl)[&#39;year&#39;]/adjust_trend * 5)) %&gt;% # make sure that the scores are between -1 and 1 mutate(trend = ifelse(trend&gt;1, 1, trend)) %&gt;% mutate(trend = ifelse(trend&lt;(-1), (-1), trend)) %&gt;% mutate(trend = round(trend, 4)) 6.5.5 Combine status and trend scores Choose only region_id and score, and add two more columns identifying score dimension (status or trend) and goal name. scores = r.status %&gt;% select(region_id, score=status) %&gt;% mutate(dimension=&#39;status&#39;) %&gt;% rbind( r.trend %&gt;% select(region_id, score=trend) %&gt;% mutate(dimension=&#39;trend&#39;)) %&gt;% mutate(goal=&#39;AO&#39;) 6.6 Developing goal models and adding new data layers workflow with configure_toolbox.r 6.6.1 Update goal call in goals.csv** goals.csv in the conf folder provides input information for functions.r, particularly about function calls. These are indicated by two columns: preindex_function (functions for all goals that do not have sub-goals, and functions for all sub-goals) and postindex_function (functions for goals with sub-goals). In the preindex_fuction, you could specify variables such as status_year and trend_year, which you can call in your goal function. Note that it is not necessary to specify those variables. If you do not use them in your function as in the CS example, you could delete those variables in preindex_function. Changing goal weights will be done here by editing the value in the weight column. Weights do not need to be 0-1 or add up to 10; weights will be scaled as a proportion of the number of goals assessed. The ten goals are weighted equally by default. 6.7 Removing goals 6.8 Changing subgoals (these last 2 may be better in a different chapter really). "],
["updating-your-website.html", "Chapter 7 Updating your website 7.1 Overview", " Chapter 7 Updating your website 7.1 Overview make maps, flower plot TODO: add from NCEAS roundtable training "],
["brainstorm.html", "Chapter 8 Brainstorm 8.1 Overview 8.2 Remind yourself of the Toolbox file ecosystem 8.3 calculate_scores.r workflow 8.4 Update a data layer and let’s see the whole process again. 8.5 configure_toolbox.r 8.6 functions.r 8.7 TODISCUSS 8.8 TODISCUSS", " Chapter 8 Brainstorm THIS IS NOT A CHAPTER, but for meeting w/ @ningningj, @jules32 2/15 8.1 Overview This is a 2-hour hands-on training. All training materials are below, and can also serve as a self-paced workshop without in-person instruction. 8.1.1 Prerequisites Before you begin, do the following: Make sure you have RStudio and GitHub setup (Chapter 3), with an up-to-date version of R and RStudio Fork the toolbox-demo repository into your own GitHub account (click Fork in the upper right corner, and select your account) Clone the toolbox-demo repo from your GitHub account into RStudio (Chapter X) Get comfortable: be set up in a way so that you can see this tutorial and your RStudio window (maybe 2 screens, maybe switching between programs). 8.2 Remind yourself of the Toolbox file ecosystem Chapter 4 In the toolbox-demo repo, we have a scenario folder called region2016. 8.3 calculate_scores.r workflow calculate_scores.r is a script that you’ll run a lot - in its entirety and piece-by-piece. It will load the libraries you need, check your book keeping and configure everything for ohicore, calculate OHI scores by calculating the required dimensions in a specific order (see below) and ultimately save scores for each goal and dimension in scores.csv. OHI ‘dimensions’ are status, trend, pressures, resilience, likely future state, and scores, and are calculated for each goal. follow along, we’re doing this together… 8.3.1 run install_ohicore.r TODO: explanation of what’s happening, potential errors (eg not have devtools installed, typos…) 8.3.2 region2016/calculate_scores.r Open calculate_scores.r by navigating to it in the region2016 folder and clicking on it. comments up top to help explain run line-by-line, explain warning messages. The order that CalculateAll() operates: YOUR goal models (status + trend) in functions.r, pressures and resilience based on YOUR matrix tables, Likely Future State and Scores (combo of the above) ## run the configure_toolbox.r script to check configuration source(&#39;~/github/toolbox-demo/region2016/configure_toolbox.r&#39;) # ... # tr_travelwarnings # Warning messages: # 1: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : # Unused fields... # ico_spp_iucn_status: iucn_sid # 2: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : # Rows duplicated... # ico_spp_iucn_status: 816 ## calculate scenario scores scores = ohicore::CalculateAll(conf, layers) # Running Setup()... # Calculating Status and Trend for each region for FIS... # Calculating Status and Trend for each region for MAR... # 95th percentile for MAR ref pt is: 0.0758396517531756 # ... # Calculating Pressures for each region... # There are 6 pressures subcategories: pollution, alien_species, habitat_destruction, fishing_pressure, climate_change, social # These goal-elements are in the weighting data layers, but not included in the pressure_matrix.csv: # LIV-aqf # These goal-elements are in the pressure_matrix.csv, but not included in the weighting data layers: # CP-coral, CP-mangrove, CP-saltmarsh, CS-mangrove, CS-saltmarsh, HAB-coral, HAB-mangrove, HAB-saltmarsh, HAB-seagrass, LIV-ph, LIV-tran, CP-seaice_shoreline, HAB-seaice_edge, ECO-wte, LIV-wte, LIV-sb # Calculating Resilience for each region... # There are 7 Resilience subcategories: ecological, alien_species, goal, fishing_pressure, habitat_destruction, pollution, social # These goal-elements are in the resilience_matrix.csv, but not included in the weighting data layers: # CP-coral, CP-saltmarsh, CS-saltmarsh, HAB-coral, HAB-saltmarsh, HAB-seagrass, CP-mangrove, CS-mangrove, HAB-mangrove, HAB-seaice_edge, CP-seaice_shoreline # ... # Calculating Goal Score and Likely Future for each region for FIS... # Calculating Goal Score and Likely Future for each region for MAR... # ...Calculating post-Index function for each region for FP... # Calculating post-Index function for each region for LE... # Calculating Index score for each region for supragoals using goal weights... # Calculating Likely Future State for each region for supragoals using goal weights... # Calculating Post-process PreGlobalScores() function for each region... # Calculating scores for ASSESSMENT AREA (region_id=0) by area weighting... # Calculating FinalizeScores function... And the warning messages: Warning messages: 1: In left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) : joining factors with different levels, coercing to character vector 2: In left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) : joining factor and character vector, coercing into character vector 3: In left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) : joining factors with different levels, coercing to character vector 4: In left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) : joining factor and character vector, coercing into character vector 5: In min(d$x, na.rm = T) : no non-missing arguments to min; returning Inf 6: In max(d$x, na.rm = T) : no non-missing arguments to max; returning -Inf 7: In min(d$x, na.rm = T) : no non-missing arguments to min; returning Inf 8: In max(d$x, na.rm = T) : no non-missing arguments to max; returning -Inf 8.3.3 Recap of what just happened 8.4 Update a data layer and let’s see the whole process again. 8.4.1 update data layer but with the same layer name TODO: and register it too, briefly. make a fake Prep.r. last step: save in layers folder Ning: anything we show here should be what they would do. Look at Ning’s tutorials/data prep 8.4.2 rerun calculate_scores.r see that now scores.csv shows up in the git window. Great way to check your work. Which goal do you expect to change? and layers.csv, and your layers file So now let’s take a closer look, let’s check out configure_toolbox.r, the first thing that runs. 8.5 configure_toolbox.r What does it do? 8.5.1 loads libraries (also, if you are requiring other libraries, this would be the place to put them) 8.5.2 ohicore::Conf() ## load scenario configuration conf = ohicore::Conf(&#39;conf&#39;) # (no output). TODO: Explain 8.5.3 ohicore::CheckLayers() It lists all of the layers that are registered. Check to make sure ours is there. ## check that scenario layers files in the \\layers folder match layers.csv registration. Layers files are not modified. ohicore::CheckLayers(&#39;layers.csv&#39;, &#39;layers&#39;, flds_id=conf$config$layers_id_fields) Warning messages alert you to problems with specific layers. eg duplicates in a status layer. Byproduct of the repo creation; you’ll be changing this layer anyways. Warning messages: 1: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : Unused fields... ico_spp_iucn_status: iucn_sid 2: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : Rows duplicated... ico_spp_iucn_status: 816 8.5.4 ohicore::Layers() TODO: explain ## load scenario layers for ohicore to access. Layers files are not modified. layers = ohicore::Layers(&#39;layers.csv&#39;, &#39;layers&#39;) # (no output) 8.6 functions.r Remember from calculate_scores.r that after configure_toolbox, the next thing that happens is that CalculateScores() runs through the goal models and calcuates status and trend. Let’s look line-by-line at one of those goal models. We’ll do it for the goal whose layer we changed. 8.7 TODISCUSS 8.7.1 change the goal model with the same data layers 8.7.2 add a new layer, and have the goal model use the new layer add a new row to layers.csv use SelectLayersData() to access your new layer, and then use it in a calculation. end 2-hour tutorial. 8.8 TODISCUSS I deleted the figure-making in calculate_scores.r for now "]
]
