[["index.html", "Ocean Health Index Toolbox Training Chapter 1 Welcome", " Ocean Health Index Toolbox Training Ocean Health Index Team 2021-03-22 Chapter 1 Welcome This book is the Toolbox Training for the Ocean Health Index. It improved iteratively and the most recent version always openly available online. The single biggest motivation of the Ocean Health Index is to use science to inform marine management. And not just any science, the best available science, data, methods, and tools. OHI assessments use collaborative open software so that they are transparent and reproducible; we call this software the OHI Toolbox. Openness is an important part of how we work; we describe how and why in Lowndes et al. 2017, Nature Ecology &amp; Evolution: Our path to better science in less time using open data science tools. Using the OHI Toolbox requires coding and using data science software; you can learn this in OHI’s Intro to Open Data Science training book. This Toolbox Training book will train you to prepare for and use the OHI Toolbox. It can be used to teach workshops or for self-paced learning. "],["intro.html", "Chapter 2 Introduction 2.1 Overview 2.2 What to expect 2.3 Tools and Resources", " Chapter 2 Introduction 2.1 Overview The single biggest motivation of the Ocean Health Index is to use science to inform marine management. And not just any science, the best available science, data, methods, and tools. OHI assessments are highly collaboratative, and include information and perspectives from different dicisplines and stakeholders. For OHI assessments to be most efficient and transparent, we emphasize reproducibility and collaborative open data science tools. You are in the Conduct Phase of an OHI assessment, what is involved? In the Conduct Phase, you will tailor the conceptual OHI framework for your assessment area, and then tailor the OHI Toolbox to calculate OHI scores for your assessment area (see figure below). The core OHI features for the Framework and the Toolbox to help guide you as you tailor your assessment. This means you’re not starting from scratch; you will build directly off of previous work by the OHI team’s global assessments and by the growing number of independently-led OHI+ assessments. 2.2 What to expect We have developed conceptual guidance and computer software and workflows to streamline your assessment as much as possible. This will let you focus on tailoring the OHI for your assessment. This means that you can focus on goal models and data for goals, pressures, and resilience. You do not need to focus on how scores are calculated: our Toolbox software will use your data and your goal models and calculate OHI scores for you. There is a lot of bookkeeping involved and we strongly advocate transparency and repeatability throughout your assessment, so that you can remember what you did and communicate it to others in the future. This is why we emphasize collaborative documentation about all decisions made, and coding using open data science tools. 2.2.1 Tailor the Conceptual Framework First, you should focus on developing goal status models and gathering appropriate data. This will take ~1/3 of the total time for your assessment, and will involve the whole team. There are a lot of decisions to make about what data to use and how to set reference points. Documenting these decisions are critical. Here’s what you will do: Understand how goal status models work, and what has been done in the past ohi-science.org/goals global assessments supplemental information Tailor the OHI Framework to your assessment area. This means exploring available data and defining the spatial boundaries of your assessment. You will gather data and think about reference points as you develop goal status models. Gather data with the Data Planner: Chapters 3 and ?? 2.2.2 Tailor the OHI Toolbox Next, you’ll use the OHI Toolbox, which means your technical team will be coding in R, RStudio, Git, and GitHub. It’s important that you have already tailored the conceptual framework and have gathered the data you need before you begin using the Toolbox. 2.2.2.1 Learn the OHI workflow To learn the open data science workflow we use and describe in Lowndes et al. 2017, Nature Ecology &amp; Evolution, use our OHI data science training. 2.2.2.2 Prepare your data layers This will take another ~1/3 of the total time for your assessment. Prepare Data: Chapter 7 2.2.2.3 Understand how the OHI Toolbox works Create your repo from the OHI+ template Learn about your repo Learn how the Toolbox works (hands-on): Chapters 6, 8, 10 2.2.2.4 Tailor the OHI Toolbox’s goal status models for your assessment. This will take the final ~1/3 of the total time for your assessment. The ohicore R package will calculate OHI scores using the information you tailor (status models, and your data for status, trend, pressures, and resilience) and calculate the final scores. Modify goal models Modify pressures/resilience 2.3 Tools and Resources During your OHI assessment you will mainly use: Google Drive (or similar, recommended) to collaborate with your whole team, and document thoughts and decisions about data and status goal models and reference points, etc The OHI Toolbox (required) to organize and prepare data, and tailor goal status models 2.3.1 Google Drive folder This is a place you can organize presentations, meeting agendas, notes, and the OHI+ Planner (see Chapter 4. Why Google Drive? OHI is a long-term, highly collaborative process. To make working together with multiple team members effecient, you will use many open-science tools, including Google Drive, Rstudio, and Github. Lets start with collaborating in Google Drive, where all participants can view and edit the same materials, and take notes. The advantage of using a shared Google Drive folder is that all your decision-making and insights are collected here in one place, rather than in disparate emails or notes, or lost without even being recorded. 2.3.2 OHI Toolbox The OHI Toolbox is made to organize and process data, document decision making, calculate scores, and share results within or outside your team. It was created to facilitate score calculations as well as the organization of information and transparency of the entire workflow. The Toolbox is built with open-source, freely available software, particularly Github and RStudio. Treat the Toolbox as your notebook, calculator, and presentation of your work. No more endless email chains or passing spreadsheets back and forth! If someone wants to see where your data comes from, how you have processed the data, the rationale for including or excluding certain data, and how the scores are calculated, they can find the answers from your work. It increases the credibility and reproducibility of your assessment. It also makes your technical team more stable. The Toolbox will also preserve team memory. If there are personnel changes, it is easy for any new member to pick up where it was left when your data preparation has been documented clearly and kept in one place. It will also help your “future self”: months or years later you can revisit your work and understand what you have done. Your Toolbox is organized into a GitHub repository where you will store all your work. They will be tailor-made for your OHI+ assessment upon request. "],["gathering-data.html", "Chapter 3 Planning and Gathering Data 3.1 Overview and Resources 3.2 Where to start 3.3 Goals: modeling status and trend 3.4 Resilience", " Chapter 3 Planning and Gathering Data This chapter will help you think about what to include in your assessment, and what data to look for. You should use previous assessments as guidance, but not be constrained by them. You’ll need to think about the priorities and characteristics for your assessment, and how to represent them within the OHI framework. The following chapter ((Chapter ??)) will introduce you to the Planner Guide spreadsheet to help organize your ideas collaboratively with your team. 3.1 Overview and Resources There is a lot of planning and decision-making involved in an OHI assessment. To help you along, we try to provide as much guidance, code, and as many examples as possible. Here are some places to look for help as you go: publications: Best practices for assessing ocean health in multiple contexts using tailorable frameworks Sea sick? Setting targets to assess ocean health and ecosystem services ohi-science.org blogs: How to get help when conducting an OHI+ assessment New goals page compares different modeling approaches This cartoon represents the four key points in the Best Practices publication (Lowndes et al. 2015). You’ll start by building the conceptual framework for your assessment, and then remaining true to that framework as you gather data and develop goal status models that could represent ocean health for your assessment. You will also need to define spatial boundaries along the way, because you will need to gather data at that spatial scale. Documenting and sharing the process is also critical, so that you remember what you did and why you did, your team remembers what they did and why they did it, people outside your team understand what you did and why you did it, and when your assessment is repeated in the future to track changes in ocean health, others can repeat your assessment and build from it. The Toolbox will help you organize and communicate these details, and all the code you write can be rerun 3.2 Where to start We recommend starting with goals: how will you model status and trend? Status alone accounts for most of a goal’s score. You will need to plan conceptually, but ground your planning in what data are really available to use in your assessment. When you’re ready, you will prepare data and goal status and trend models as the “tailored” portion of your assessment, and use our ohicore R package for the final calculations. 3.3 Goals: modeling status and trend Start with the ten goals in the global assessment; are they relevant? See http://ohi-science.org/goals for details about what each goal represents, as well as examples from how goals were modeled in previous assessments. Use the Planner Guide (Chapter ??) to help you think through and organize your thoughts and data. 3.4 Resilience In the OHI, we think about resilience as the social, institutional, and ecological factors that positively affect the ability of a goal to be delivered to people. To think about resilience, you will need to spend time exploring governance actions that have occurred within your assessment area (or at an even larger spatial scale, ex: nationally) that directly affected ocean policy and/or specific ocean pressures in your assessment area. The majority of the work will be looking up what legislation exists, how well it addresses specific ocean pressures, when it was introduced, and detailing the changes. This may also include gathering reports that document enforcement and compliance with key regulations or effectiveness metrics through time and space. Oftentimes, reports may be qualitative, which means there are no data. This means you may need to translate written reports into quantitative metrics, which you can do with your team and through discussions with local experts. 3.4.1 Types of Resilience Similar to pressures, resilience will ultimately be included in an OHI assessment through the OHI Toolbox by having a data layer for each resilience measure, with information for each region within the study area. Ideally, each pressure measured in the OHI should have a corresponding resilience measure, which is meant to ‘balance’ the pressures that negatively affect ocean health. The Ocean Health Index considers resilience in three categories: ecological integrity pressure-specific regulations aimed at addressing ecological pressures social integrity The first two measures address ecological resilience while the third addresses social resilience. Ideally, for any resilience measure, you would have three tiers of information: Existence of regulations: Are regulations in place to appropriately address the ecological pressure? Implementation and enforcement: Have these regulations been appropriately implemented and are there enforcement mechanisms in place? Effectiveness and compliance: How effective have the regulations been at mitigating these pressures and is there compliance with these regulations? 3.4.1.1 Ecological integrity Ecological integrity is about general resilience within the ecosystem. You will be looking for the qualities that make an ecosystem strong to anything that could happen to it. If your ecosystem was affected by something, how easily could it bounce back to anything? 3.4.1.2 Pressure-specific regulations Pressure-specific regulations are intended to address ecological pressures, and are measured as laws, regulations. 3.4.1.3 Social integrity Social integrity is about general resilience within the society You will be looking for the qualities that make a society strong to anything that could happen to it. So any metric of how stable a society is goes here. If your society got hit with something, how easily could it bounce back to anything? 3.4.2 How to begin When you begin thinking about potential resilience metrics, you also need to think about whether data may be available. A good place to start is to see what data were used for other assessments, and see if you have better data in your region. For example, for social integrity the OHI Global assessment uses the World Bank’s World Governanace Indicators, do you have something better within your assessment area? In the US West Coast Assessment Like USWC did (and in BC Canada well-being). When beginning a search for resilience metrics to counteract pressures to your system, there are three levels of questions you can ask yourself to begin to get to the heart of if regulations exist that address these pressures and how effective the implementation, enforcement, and compliance with these regulations is: Does a regulation exist that appropriately addresses a specific pressure? Is the regulation being appropriately complied with? Are there mechanisms in place supporting enforcement of the regulation? Here are some specific questions you can begin to ask yourself when thinking about how to counter specific pressures (Pressure-specific regulations). In this spreadsheet we organize these questions around the pressures used in Global assessments, but these questions can be tailored to any number of pressures or groups of pressures depending on what is included in your own regional assessment. "],["data-planner.html", "Chapter 4 OHI Data Planner 4.1 Overview 4.2 Data Planner spreadsheet 4.3 Status Data tab 4.4 Chapter Recap", " Chapter 4 OHI Data Planner The purpose of Chapter ?? is to help you think about data for your assessment in a structured way. This is a 1-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository that is used throughout this chapter. 4.1 Overview A successful OHI+ assessment depends on representative data and models. With so much (or sometimes so little) information out there, how do you select the optimal data to be included in your study? How do you develop models that best reflect the conditions of your ocean health? How do you keep track of ideas you have and decisions you make? How do you work with your team so that you can contribute to ideas? Here we have developed a OHI Planner to guide you through this important, yet sometimes daunting, process of data selection and model exploration. We’ll start by exploring the columns in the spread sheet and what they are for, and then walk through examples of how to fill them out. 4.1.1 Prerequisites The OHI Data Planner is a document that can help you organize your thinking around the data available and how it could be used in your OHI+ assessment. Here we will walk through the OHI Data Planner together. 4.2 Data Planner spreadsheet Information from the spreadsheet is not going to be used directly by the Toolbox. Rather, this Data Planner is built to start the collaborative OHI process and help you think about data. The Planner will help your whole team design your plan and contribute ideas. Then, the technical team will be able to translate this plan into calculations in the Toolbox. The Data Planner serves as a way to track ideas of data and see what they look like or if they are possible to use for your assessment. It seems daunting to have to write down what you want the models to be, but here you can record simply what you’re thinking, and what the ideal would be. It’s a starting point that you can then share with your colleagues to think about together, and start looking for data. The data searching process is not a definitive phase of an assessment. You might find your initial data ideas not adequate or feasible to use for calculations later, or they don’t fit into the spatial boundaries you wanted to use. That’s okay. OHI is an iterative process, and you can always come back to this spreadsheet and edit further. Having this spreadsheet thus serves as a collaborative note for your and your colleagues to record ideas for future references. There are three tabs to be filled out: Status Data, Pressures Data, and Resilience Data. Now let’s take a look at each one of them. 4.3 Status Data tab Open up the “Status Data” tab, you’ll see these headings, or columns to be evaluated for each goal: This sheet is colored to help structure your thinking as you consider data. Generally you would want to work through this Planner from left to right. But note that the process of building models, finding data, and defining spatial boundaries is iterative. You might work on those components simultaneously in order to strike a balance between an ideal approach and data limitations. Let’s walk through each header first. 4.3.1 Goals and subgoals In the Global assessment, we identified ten “goals” - universally valued benefits provided by the ocean. However, they might not be as relevant in your region. You may remove the goals that are irrelevant on the spreadsheet. The Baltic Sea region doesn’t get big storms because of its geography. The Coastal Protection goal is therefore irrelevant here and removed from this study. 4.3.2 Model + Data + Spatial Boundaries Goal Models and Spatial Boundaries need to be considered simultaneously, particularly in the initial data gathering stage. You may choose to set spatial boundaries based on political or geological boundaries (or some combination), and your choice will be either validated or need adjusted based on the data that are available for those boundaries. For example, let’s say you choose to assess 5 provinces separately. Then, as you gather available data, you learn that data for province 1 and 2 are reported together and are difficult to tease apart. In this case, you will need to consider combining region 1 and 2 into one region in your assessment, or looking for other data sources that are available to represent this goal. It is also important to look across other goals and the data available for those goals; do most data sets report province 1 and 2 together, or is this the only one? This will help you decide whether you would want to explore new spatial boundaries or new data sources. Let’s look at these individually: Represent goals with models Model approaches? You don’t need to decide on the mathematical formula here. Together with the next “variables” column, this column mainly aims to get you start thinking of model approaches. Is the global OHI model adequate for your needs? What should the goal capture? What ideal variables best represent the goal? Before even thinking about data, let’s think broadly, in your study area, what variables, or characteristics, of a goal best represent the philosophy of it, regardless if there is data available? Sometimes we tend to constrain our model development with the data we know we have. You can build a more representative model by thinking through what are the most ideal variables (eg. popularity of a region among tourists) to capture information, then find data that best reflect those variables (eg. hotel vacancy rates? international flights to this region? surf shop revenue? cruise ship revenue? etc). Different OHI+ projects have been creative at how they represent this goal as data permits. Check out the OHI-Science Goals page (ohi-science.org/goals) page. It can help you understand the philosophy of a goal by illustrating what has been done in other locations. Let that catalyze your discussions. Are any of the past approaches suitable, or are there other obvious variables to better represent your goal in your country/region? Another important factor that determines OHI scores is Reference Point, ie. what status of this goal can be awarded a score of 100? Has the government set a target to achieve? Is there a model region that has become a standard other regions should aspire to? Is there a historical point the regions should return to? Find data for your ideal or proxy model variables Choice of model variables and reference points are often limited by data availability, time frame, and resolution. The data columns are a place to catalog a list of the data that could work: from your knowledge, when you ask your colleagues, digging through databases online, etc. Add as many rows as you need to to record your ideas. Having this master sheet of ideas will help you keep track of your thoughts and make collaboration with your colleagues easier. Years: Typically having only one year of data is not enough to objectively reflect the status and trend of a goal. Five years of data are recommended. If that’s not available, using fewer years of data is possible. Spatial resolution: Data needs to be presented to the region level. Regions are sub-units, or assessment units, of your study area. At the region level, each OHI goals/sub-goals will be analyzed and scored. For example, you study area may be an entire country, while you regions are each coastal province or state. You can add more regions as needed on the spreadsheet. When you find a data source (eg. national poverty level), you might need to be disaggregate, or separate the data from large-scale (eg. national) to small-scale (eg. provincial). You could contact the agency that publishes the data and see if they have gathered small-scale data. If that’s not possible, there are means (eg. GIS) to separate the large-scale data to local scales, although that could reduce the accuracy of the data. Pressures &amp; Resilience are an important yet often overlooked component of the OHI. Pressures are factors that negatively affect the status of each goal/subgoal, while Resilience are factors that will improve the status or negate the impacts of the pressures. They will be used to predict the Future State. You will need to quantify each factor later on in the assessment. But at this stage, we suggest you brainstorm and jog down as many ideas as you could think of first. 4.3.3 Examples Now we have run through the basic theories behind each column, let’s walk through a few examples together. They are on the next tabs of the spreadsheets (Example 1 - 4). Example 1 - (Model &amp;) Variables Models are relationships among variables. Before gathering any data, think about ideal variables that could represent the goal. How could each variable be relevant/representative of ocean health? In this example, artisanal fishing opportunities measure whether people who need to fish on a small, local scale have the opportunity to do so. Thus the variables need to reflect the need for artisanal fishing, how easy or hard it is for fishermen to access ocean resources when they need them, and the sustainability of harvest of all fish stocks that fishermen use. The number of artisanal fishermen and/or the number of people below poverty line could reflect the need for artisanal fishing. Fish stock health can tell the sustainability of fishing in the region. Catch might be unsuitable, because it reflects the amount fished in the past, not the sustainable capacity for artisanal fishing. The fish stocks might have been over- or under- fished in the past. Gas price and number of ports could limit the fisherman’s ability to access ocean resources. As you might have noticed, to the right side of the sheet, there is a column for notes. In this case for Artisanal Fishing Opportunities (AO), Fish catch is deemed not suitable for the reasons stated above. It’s just as important to document the rationales for excluding a data source as it is to record why you included one. Example 2 - Data These few columns detail the data you find for each of the variables you decided suitable for your model. Are data available? For fish stock health, there is no readily accessible data sets. So this variable can’t be used in your study. But other variables seem to have data. Are they from a credible source? The quality of your assessment depends on the quality of your data. Government agencies (eg. Energy Information Administration), or research institutes tend to be more credible. How many years does it cover? As OHI measures trend for each goal, the trend is derived from ocean health status over time, ideally 5 years. In this case, there is sufficient data (1950-2016). Also, what’s the spatial resolution of this source? Spatial resolution should be compatible with the geopolitical boundaries of the regions in your study area. If the source only provides a national average, but the assessment requires provincial-level data, you need to look further. Example 3 - Spatial resolution As mentioned above, data should be disaggregated to the regional level that you determine to be the optimal spatial boundaries of your study. In the data exploration process, however, you might find that the geopolitical boundaries you initially thought to be ideal are not supported by data. For example, if region 1 and 2 do not have independent data - that data can only be disaggregated from national level data, and region 1 and 2 may end up with non-distinguishable data, you might consider combining region 1 and 2 into the same region for your assessment. Sometimes there isn’t data available, and sometimes data isn’t relevant to a region, e.g. if there are no mangroves growing in Region 4. So it’s important to have a system for distinguishing these two things. Here, we’ll use NA if it’s not relevant; that’s the syntax that R and the OHI Toolbox will use so we can be consistent. When data are not available but they should be, here we’ll mark it with an N. Example 4 - Reference Point Reference points, or targets, are essential for rescaling and scoring. For example, if the target is to have 100 fishermen fishing, and the data shows only 50 fishermen are fishing, if the AO model depends only on fishermen, the AO score could be about 50 (there will also be pressures and resilience acting). How should reference point(s) for the model variables be set? They could be set based on information from published policy targets (e.g. government-set targets to achieve), scientific studies (e.g. maximum sustainable yield for a fishery), etc. Sometimes there is no easy-to-find reference point from literature. In those cases, you’ll need to discuss with experts and your team to set a reference point that makes the most sense to your area. Often, reference points are temporal (eg. historical coverage of mangrove) or spatial (eg. the region that has the highest number of tourists). Let’s look at a few examples: Gas prices fluctuates often. It’s difficult to set a reference point where it’s optimal. In this case, we set the reference point to be a spatial one. It is 110% of the lowest gas price across all regions in a given year. Number of artisanal fishermen might be dwindling over time, and we might want to preserve the number of fishermen in a region. So we set the reference point to be the highest number of fishermen in a region within the past 5 years. Number of people below poverty line often is a government set standard to achieve, so is the number of ports. Example 5 - Pressures &amp; Resilience As mentioned above, at this stage of your assessment, it’s important to start thinking about pressures and resilience - factors that contribute to long-term outcomes, or the future state, of each goal or sub-goal. Think broadly. Here are a few examples: What pressures make it harder for small fishermen to get access to the stocks? For example, high gas price, poor fisheries stock health, few ports where fishermen could access the sea, etc. What regulations are there to directly increase access and counter the pressure? For example, loan programs for fishermen, stock improvement measures, etc. What regional or national policies that might indirectly improve the status of this goal? For example, policies to move people out of poverty could decrease the need of artisanal fishing, and clean water laws that improve water quality. How the status of other goals affect this goal? For example, severe water pollution could affect the fisheries. 4.4 Chapter Recap Now we have walked through how to utilize this planner to orient your team around the goals, from thinking about variables and models, to gathering data sources within spatial boundaries, and to brain storming pressures and resilience factors. The planner serves as a platform to record and share notes, and collaborate with your colleagues during the iterative process of an OHI assessment. You might find that the data of one goal is ready to be processed and calculated with the OHI Toolbox, while your team still tries to explore options for another goal. It is quite alright to move ahead with some goals before others. Or you might find yourself needing to eliminate some data and add others after you further explored the data you found earlier. We hope this Planner could provide a home base for your data gathering and exploration. You can come back to this sheet, and modify it to your own needs anytime during the assessment. "],["toolbox.html", "Chapter 5 OHI Toolbox 5.1 The OHI Toolbox and open data science 5.2 How you will work 5.3 Requesting OHI repositories", " Chapter 5 OHI Toolbox OHI assessments use our OHI Toolbox software, which helps our work be transparent and reproducible. The OHI Toolbox is software to calculate OHI scores. You will be able to incorporate your data and models to represent your regions by using the Toolbox. 5.1 The OHI Toolbox and open data science The OHI Toolbox depends upon the ‘open data science tools’ R, RStudio, Git, and GitHub. They are free to download and use, they are cross-platform (meaning they work on OSX and Windows), and they can be used to help organize, create, reproduce, and communite collaborative analyses. And that’s what OHI is all about! But something important is that these skills are transferrable; they are not only relevant to OHI but will serve you well for your other projects in the future. For more information, see slides from our What is the OHI Toolbox presentation. Learning the open data science tools (R, RStudio, Git, and GitHub) required for the Toolbox takes time. We have an introduction to open data science training book to teach you the skills you’ll need to use the OHI Toolbox. 5.2 How you will work Using RStudio and GitHub for analysis also means with can use this collaborative workflow for asking questions and troubleshooting too. Troubleshooting and asking for help 5.3 Requesting OHI repositories As your team gathers data and is ready to prepare it for the Toolbox, you can request OHI repositories. The next chapter will help you get familiar with the OHI Toolbox ecosystem. "],["toolbox-ecosystem.html", "Chapter 6 Toolbox Ecosystem 6.1 Overview 6.2 Prerequisites 6.3 Repository home folder (ex: toolbox-demo) 6.4 Prep folder 6.5 Scenario folder (ex: region2016) 6.6 conf folder 6.7 calculate_scores.Rmd", " Chapter 6 Toolbox Ecosystem 6.1 Overview Welcome to the OHI Toolbox, the engine behind all OHI assessments. The Toolbox is an ecosystem of R scripts and data files, organized in folders and sub-folders. The information in your repository will interact with an R package called ohicore, which does the core operations to calculate OHI scores. In this chapter, we will learn how the Toolbox is structured - where you would store data, modify models, make calculations, as well as record decision-makings. The Toolbox ecosystem introduced here is the same in any assessment. So, if you would like to explore your own repository or an existing repository such as the Gulf of Guayaquil assessment you can navigate through those repositories in the same way. This tutorial will take roughly 30 minutes. Let’s get started! 6.2 Prerequisites We will explore these files together on your own computer, but we will not be calculating scores in this chapter. If you will be using the Toolbox, please clone the repository to your computer with the following steps. You can clone either the toolbox-demo or your assessment’s repository. If you will not be calculating scores, you do not need to clone anything; please follow along online at GitHub https://github.com/OHI-Science/toolbox-demo or with your assessment’s repository. Have up-to-date versions of R and RStudio and have RStudio configured with Git/GitHub https://cloud.r-project.org http://www.rstudio.com/download http://happygitwithr.com/rstudio-git-github.html Fork the toolbox-demo repository into your own GitHub account by going to https://github.com/OHI-Science/toolbox-demo, clicking “Fork” in the upper right corner, and selecting your account Clone the toolbox-demo repo from your GitHub account into RStudio into a folder called “github” in your home directory (filepath “~/github”) Get comfortable: be set up with two screens if possible. You will be following along in RStudio on your own computer while also watching an instructor’s screen or following this tutorial. Now you have set up your computer, let’s open the toolbox-demo repository on your computer, and go from there. 6.3 Repository home folder (ex: toolbox-demo) When you first open the repository, you’ll encounter the following files and folders. Note: if you have a starter repository, you’ll have a prep folder but not a scenario folder (which is region2016 in the screenshot below). Overall, all the main files you will see are either of the two file types: .csv files contain data inputs or configuration information. .R or .Rmd scripts are written in the programming language R and use data inputs for processing and calculations. Among all the files on your screen, the most important files are: prep is a data preparation folder. This is where you will store raw and/or intermediate data, and the R scripts you create to explore and format those data, and make trial runs of different models. You will spend roughly the first half of your time during your assessment here. region2016 is the scenario folder. The scenario folder has the architecture of the OHI Toolbox that is needed to calculate scores. It contains all of the inputs needed to calculate OHI scores, and you will modify these inputs when conducting your assessment. By default it is named regionYEAR (e.g. cnc2016 for New Caledonia 2016) to indicate that the assessment is conducted at the region scale (province, state, district, etc.), based on input layers and goal models used in the most recent global assessment (e.g. 2016). README.md file accompanys most folders or files, as you will discover. It is a place to take notes for yourself, your team, and thinking ahead to anyone interested in the future. Let’s take a closer look at the prep and region2016 folders. 6.4 Prep folder Click on prep and let’s see what is inside: Within prep, there is a sub-folder for each goal and subgoal, as well as pressures and resilience. These folders are meant to help you be organized and promote scripting for data preparation (this is important for reproducibility and repeatability). Note that some goals depend on the same data and thus data can be prepared into layers from one place instead of for each goal. This is the case for goals dependent on habitat data: CP, CS, HAB, and goals dependent on species data: SPP, ICO. Click on the ‘CW’ folder. Within each goal folder, there are typically a .Rmd script and a sub-folder to contain data. The CW_data_prep.Rmd document is a script where you will explore your raw data, format the data, try different models, make graphs and maps, as well as document decision making. We will come back to this script in Chapter 7 to learn how to prepare data for calculations. We use RMarkdown (.Rmd) files because they can be rendered as webpages (for example, CW_data_prep.html in the same CW folder) and can help explain the data processing steps and motivation behind them in written language. Click ‘Knit’ from the RStudio editor or click on the .html file from the file pane and select ‘View in web browser,’ and you will see a clean, human-readable webpage that can be shared online and viewed by anyone. Now we’ve walked through the prep folder, let’s take a look at the scenario folder. Click back to the main toolbox-demo folder, and open the region2016 folder. 6.5 Scenario folder (ex: region2016) Again, this scenario folder contains all the data layers and scripts for you to calculate OHI scores. Let’s look into the sub-folders and see what they do. 6.5.1 layers folder &amp; layers.csv After you prepared your data layers in the prep folder, you will save them in the layers folder, and register them in layers.csv. (You will learn how to do so in Chapter 7). The layers folder contains individual data layers as .csv files for each goal and subgoal, named in a specific manner for easy organization and recognition, as shown here. layers.csv is a data registry for all the data layers in the layers folder. It is also a directory for ohicore to find the exact data layers for calculations. The file itself is spreadsheet that is best to be opened in a spreadsheet editor such as Microsoft Excel. 6.6 conf folder The conf folder includes important configuration files required to calculate OHI scores, as shown here. These are the model parameters that the Toolbox needs to calculate scores, along with your prepared data layers. Most of the maneuvering in the Conduct phase of the assessment is done within this folder. There are both .R scripts and .csv files. We will investigate them in the order you will interact with them. 6.6.1 functions.R functions.R contains models to calculate goal status and trend for all goal and sub-goals. Much of your time will be spent here developing goal models to calculate status and trend with the data layers you prepared. Each goal and sub-goal equation is stored as a separate function within the script, identified by a 2- or 3- letter code. These functions calculate the status and trend using prepared layers saved in the layers folder and registered in layers.csv. 6.6.2 scenario_data_years.csv This file organizes year information for each layer. OHI assessments use the most recent data available, but which year is most recent will vary from data set to data set. scenario_data_years.csv acts like a registry to help keep track of all these years. When you calculate OHI scores, you will be explicit about the year your completed assessment will represent, and we call this the “scenario year.” This file also makes it possible for the Toolbox to calculate repeated assessments. This file has 3 columns: the layer_name, the year your assessment represents, called the scenario_year, and the most recent year of data, called data_year. Let’s have a look: You can see that for each layer, the data_year is associated with a scenario_year. In the example above, the data from the ao_access layer have never been updated so we use the same data year for each scenario year, which is therefore repeated in the data_year column. But for the ao_need layer, many years of data are available, but there is a lag time for which year of data corresponds to which scenario year. 6.6.3 pressures &amp; resilience There are four .csv files relating to pressures and resilience. pressures_categories.csv pressures_matrix.csv pressures_categories.csv pressures_matrix.csv They are spreadsheets that are best opened with Excel. Pressures and Resilience are two of the four dimensions used to evaluate each goal or sub-goal, along with goal status and trend that you calculate in functions.R. More details on how to operate with these files are explained in future chapters. pressures_categories.csv This is a table to record the name of each pressures data layer, its category, and sub-category. Each data layer name is the same name that is saved in the layers folder and is registered in layers.csv. Each layer falls under one of two categories - ecological or social pressures, and one of several sub-categories to further represent the origin of the pressure (e.g. climate change, fishing, etc), which is also indicated by a prefix of each data layer name (for example: po_ for the pollution sub-category). pressures_matrix.csv This is a table that indicates which individual pressures (stressors) affect which goal, sub-goals, or components, and weights them from 1-3. A weight of 0 is shown as a blank. A higher weight indicates more negative impacts on that goal or component of the goal. These weights are relative to each row of the matrix (goal, sub-goal, or component). These weights are used in global assessments based on scientific literature and expert opinion, and you can modify the weightings if necessary for your assessment. The pressures matrix is the same as Table S25 in Halpern et al. 2012, with current and detailed information in the online OHI-Global supplemental information document. Each pressure (column) of the pressures matrix is the layer name of the pressures layer file that is saved in the layers folder and is registered in layers.csv, matching what’s recorded in the pressures_categories.csv. resilience_categories.csv Similar to pressures_categories.csv, this file contains information on each resilience data layer, including its name, category, and sub-category. Each resilience layer’s name is the same as the data layer to be saved in the layers folder and is registered in layers.csv. In addition, it also includes information on category type - ecosystem, regulatory, or social, indicating the origin of the resilience layer. Each resilience layer is also assigned a weight of 0-1, representing the level of resilience against pressures. Different from the values used in pressures matrix, the resilience weights depend on the level of information available. resilience_matrix.csv This is a table that indicates which individual resilience measures affect which goal, sub-goals, or components. The resilience matrix is the same as Table S26 from Halpern et al. 2012, with current and detailed information in the online OHI-Global supplemental information document. 6.6.4 goals.csv goals.csv is another spreadsheet file that is best opened in Excel. goals.csv has information about goals and sub-goals, and controls which goals are calculated, and how they are represented in figures. If a goal exists in this list, it will be calculated, and needs an accompanying function in functions.r. You will likely only modify this file if you are removing or adding goals or sub-goals, or changing the weighting for how goals are combined. Here are the columns within goals.csv: order_color &amp; order_hierarchy: the order to display in flower plots order_calculate: the order in which the goals and sub-goals are calculated for the overall Index scores goal &amp; parent: indicates the relationship between sub-goals and supra-goals (i.e. goals - with sub-goals) weight: the relative weight of each goal to calculate overall Index scores preindex_function: indicate what parameters are called to calculate scores for goals and - sub-goals in functions.R postindex_function: indicate what parameters are called to calculate scores for supra-goals in functions.R 6.6.5 config.R config.R configures labeling and constants appropriately. You will only need to modify this file when working with goals that have categories (example: habitat types or economy sectors) that are affected differently by pressures and resilience measures. 6.6.6 conf folder recap We have just explored the files in the conf folder. To recap, the conf folder contains important configuration files required to calculate OHI scores, including functions.R, scenario_data_years.csv, and pressures and resilience files. Now let’s take a step back to the region2016 folder, and check out what else is there. 6.7 calculate_scores.Rmd Note: calculate_scores.Rmd replaces three files that existed in previous versions of the Toolbox: calculate_scores.R, configure_toolbox.R, and install_ohicore.R. We collapsed those three files into one .Rmd file to simplify the workflow, although they still function correctly as individuals if your repository has them as three separate files. You can find information about these three files below. calculate_scores.Rmd is the code and workflow to calculate OHI scores. It enables the information in your repository to interact with an R package called ohicore, which does the core operations to calculate OHI scores. This Rmd will install the ohicore package at the beginning of your assessment, and then call it as a library after that. Whenever you change any data in layers, modify models in functions.R, and make changes to pressures and resilience, you could run code from this file and see how the OHI scores change. Scores will be saved in scores.csv. 6.7.1 calculate_scores.R Note: depreciated, see calculate_scores.Rmd section above. This script used to be inside the repository’s scenario folder. calculate_scores.R is a script you’ll come to use often. As the name tells us, it is a script to calculate OHI scores. Whenever you change any data inlayers, modify models in functions.R, and make changes to pressures and resilience, you could run this script and see how the OHI scores change. This script runs everything required to calculate OHI scores using the prepared layers the layers folder that are registered in layers.csv. Scores will be saved in scores.csv. 6.7.2 configure_toolbox.R Note: depreciated, see calculate_scores.Rmd section above. This script used to be inside the repository’s scenario folder. This script does the pre-checks before running goal models and calculate scores. It loads ohicore, calls all goal functions and data layers in the “conf” folder, and check that all data layers are registered properly. You are encouraged to use this script when you’re working on individual goal models. After you register data layers for a goal, or make any changes to the data layers, source this script before running model-specific functions in functions.R. 6.7.3 install_ohicore.R Note: depreciated, see calculate_scores.Rmd section above. This script used to be inside the repository’s home folder. ohicore is the backbone software package of the Toolbox. It is a R package of functions that contain all the core operations for the data and models that you provide for your assessment, and it will calculate OHI scores. You don’t need to interact with or see the inside of ohicore yourself during the assessment, but you do need to install this software package once at the start of your assessment by running this script. 6.7.4 Recap The OHI Toolbox is a ecosystem of data layers and scripts, contained in folders and their sub-folders. The information in your repository will interact with an R package called ohicore, which does the core operations to calculate OHI scores. You will need to install this package at the beginning of your assessment, and then call it as a library after that. As you begin your assessment, you will spend most of your time in prep folder, where you upload, explore, and format your data layers to be saved in the scenario folder region2016 for the next step of calculations. region2016 is a folder with all the data layers, files, and scripts you’ll need to calculate scores. There you will register finished data layers, modify goal models, modify pressures and resilience, calculate OHI scores, and make flowerplots. Now we have walked thorugh the files, how do they fit into the OHI process? Below is a figure that summarizes how each file will be used in relation to the steps you would take in an assessment for future reference. "],["prep-data.html", "Chapter 7 Preparing data 7.1 Overview 7.2 Data Formatting requirements 7.3 Data Wrangling 7.4 Save and register data layers 7.5 Register data layers in layers.csv 7.6 Organizing metadata 7.7 Data prep vs. functions.r 7.8 Chapter Recap:", " Chapter 7 Preparing data The purpose of Chapter 7 is to introduce you to the basic workflow for preparing data for OHI. This is a a 2-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository (toolbox-demo) that is used throughout the this chapter. 7.1 Overview Preparing data takes the biggest chunk of time when you’re using the OHI Toolbox, even more than the final scores calculation itself. That’s when you explore raw data, see whether it fits with your ideal spatial boundaries and whether it makes sense to include it in your final calculations. If it does, you can format it further and save it as data layers, or Toolbox inputs for scores calculations. The Starter Repo 6 aims to help you wade through these important first steps of the assessment. Treat the preparatory, or “prep,” files as your notebook, calculator, and presentation of your work. Here, the process of data exploration is recorded and can be easily shared with anyone. In this chapter, we will go through the basic requirements and steps of preparing a data layer: understand the formatting requirements try a hands-on tutorial in which you can use sample data to format and save register a data layer 7.1.1 Prerequisites Before the training starts, please make sure you have done the following: Have up-to-date versions of R and RStudio and have RStudio configured with Git/GitHub https://cloud.r-project.org http://www.rstudio.com/download http://happygitwithr.com/rstudio-git-github.html Fork the toolbox-demo repository into your own GitHub account by going to https://github.com/OHI-Science/toolbox-demo, clicking “Fork” in the upper right corner, and selecting your account. Note: if you already have an OHI+ repository of your own, you can use it instead. All of the file names and architecture is the same. Clone the toolbox-demo repo from your GitHub account into RStudio into a folder called “github” in your home directory (filepath “~/github”). Note: If you’ve already forked and cloned the demo, you can instead pull from your computer to make sure you have the most recent versions of all the files. Get comfortable: be set up with two screens if possible. You will be following along in RStudio on your own computer while also watching an instructor’s screen or following this tutorial. After your toolbox-demo repository is set up, open the prep folder. It should look like this: Each goal and sub-goal has its own sub-folder, so you can store raw and intermediate data as you work in R Markdown (or R). It is highly recommended that data preparation occurs in the prep folder as much as possible, as it will also be archived by GitHub for future reference. But before we start preparing a data layer, let’s first go over the data formatting requirements. 7.2 Data Formatting requirements A data layer is a data file used to calculate scores. The global analysis included over 100 data layer files, and there will probably be as many in your own assessments. Each data layer (data input) has its own .csv file. These data layers are combined to calculate goal scores, meaning that they are inputs for status, trend, pressures, and resilience. The OHI Toolbox expects each .csv file to have: data for every region within the study area a unique region identifier (rgn_id) associated with a single score or value. data organized in ‘long’ format - as few columns as possible. (You can read more about long formatting here) OHI goal scores are calculated at the scale of the reporting unit, which is called a ‘region’ and then combined to produce the score for the overall area assessed, called a ‘study area.’ For example, the U.S. is a study area, and each coastal state is a region. In addition, to calculate trend, input data should be available as a time series for at least 5 recent years - and the longer the better, as this can be used in setting temporal reference points. Finalized data layers have at least two columns: the rgn_id column and a column with data identified by its units (eg. km2 or score). There often may be a year column or a category column (for natural product categories or habitat types). Below are examples of two different data layer files: tourism count (tr_total.csv) and natural products harvested (np_harvest_tonnes.csv). They show information for a study area with 4 regions. Each region has multiple years of data. And the second data layer has an additional ‘categories’ column for the different types of natural products that were harvested. In this example, the two data layers are appropriate for status calculations with the Toolbox because: At least five years of data are available There are no data gaps Data are presented in ‘long’ or ‘narrow’ format When data gaps, temporal or spatial, are inevitable, various gap-filling techniques can be used. We won’t go through the details here. For more information and examples, visit OHI Manual 7.3 Data Wrangling So how do we get from raw data to a data layer that looks like the ones shown above? When we first access a data set, we often don’t know whether it is suitable for our purpose, or if it provides adequate information. Raw data can be in a different format than the desired long format and have extra or incomplete information. The main task of data preparation is to comb through the raw data, combine different sources, and sometimes fill in the information gap. We call this process “data wrangling.” For reproducibility and transparency, it is also good practice to record and share the decision-making process - trials and errors, why you decide to include, or more importantly, exclude a certain data source. Fortunately, we can take notes on the data exploration process and code in one place! Here is an example of a data prep document. Let’s give it a try to make one just like this. Now let’s switch to the demo repo. Today we will use the Clean Water (CW) goal as an hands-on example. We will get sample secchi depth data, as an indicator of water clarity. Click on the CW folder and open CW_data_prep.Rmd. We will follow the tutorial from there. 7.4 Save and register data layers Note: if you are preparing data from your Starter/Prep repository, you won’t have the layers folder and layers.csv. You won’t be able to do the following steps until you have the Full repository. After you have successfully processed a data layer, and it can be used by the Toolbox for calculations, it needs to be saved and registered here: layers folder is where all data layers live, and where the Toolbox pulls a layer out when needed. layers.csv is a giant spreadsheet that contains information about each layer - which goal it is used for, filename, column names, etc., and it will direct ohicore to appropriate data layers during calculations. Let’s first save the layer. You can do that in the prep script. Let’s switch back to the Demo repository, and follow the last section. 7.5 Register data layers in layers.csv After we have saved a data layer in layers folder, we will catalogue the layer in layers.csv. ` If a layer simply has a new filename, only the filename column needs to be updated: However, if a new layer has been added (for example when a new goal model is developed), you will open layers.csv in a spreadsheet software (i.e. Microsoft Excel), add a new row in the registry for the new data layer and fill in the first eight columns (columns A-H): targets: Add the goal/dimension that the new data layer relates to. Goals are indicated with two-letter codes and sub-goals are indicated with three-letter codes, with pressures, resilience, and spatial layers indicated separately. layer: Add an identifying name for the new data layer, which will be referenced in R scripts like functions.R and .csv files like pressures_matrix.csv and resilience_matrix.csv. name: Add a longer title for the data layer. description: Add a longer description of the new data layer. fld_value: Add the appropriate units for the new data layer. It is the same as the column name in the data file, which will be referenced in R scripts in subsequent calculations. (example: area_km2) units: Add a description about the units chosen in the fld_value column above. Think about what units you would like to be displayed online when filling out “units.” (example: km^2) filename: Add a filename for the new data layer that matches the name of the .csv file that was created previously in the layers folder. fld_id_num: Area designation that applies to the newly created data layer, such as: rgn_id and fao_id. It is important to check that you have filled you the fields correctly, for instance, if “fld_value” does not match the header of the source data layer, you will see an error message when you try to calculate scores. Other columns are generated later by the Toolbox as it confirms data formatting and content. Let’s open your layers.csv from your Finder, and we will fill it out together from there: This is what the new line should look like: 7.6 Organizing metadata Keeping track of metadata is important as you create these layers. Metadata is information about the data, most importantly, its source. It’s best to provide not only a reference like Feely et al. 2009, but also a url link to where other people could access the data. Other information that can be really useful is the years of data you use, and which goal models the data are used in. You can keep track of metadata in whatever way makes most sense to you. Since layers.csv is a file that you will keep updated with every data layer, it can make sense to add information there. You can add as many columns to layers.csv as you’d like. However, this will create a really huge spreadsheet, so maybe you want to keep this information in another place. If you’ve been using the Data Planner from Chapter ??, that can be a good place to continue keeping track of all the metadata. Or, you could start another spreadsheet. It doesn’t matter where or how you keep this information, but be sure that you keep it somewhere, and keep it organized and consistent. You’ll need information for every single layer you include, and it’s easier to do as you go along than all at the end. We recommend copying the structure of layers.csv (if you’re not using layers.csv for metadata) and having at a minimum columns that are for the data name, Toolbox data layer name, description, reference, and url. Later on in your assessment, we’ll be able to take information from the columns of your csv and use them for reporting and on your website. An example of this is from the Global assessment: see http://ohi-science.org/ohi-global/layers. 7.7 Data prep vs. functions.r Where does one end and the other begin? 7.8 Chapter Recap: Hooray! You have just learned: how to process data, save, and register a data layer for the OHI Toolbox! OHI data layer formatting requirements data for each region long format best to have at least five years of continuous data how to process a messy and large raw data layer (secchi depth data for CW goal) how to saved and register the prepared data layer Now the layer is ready to be used by the toolbox to calculate status and trend scores. We’ll see you at Chapter 6 8 to learn that! "],["calcs-basic.html", "Chapter 8 Calculations: basic workflow 8.1 Overview 8.2 Review the Toolbox file ecosystem 8.3 Calculate with ‘out-of-the-box’ data and models 8.4 Calculate with tailored data 8.5 Explore Configure Toolbox 8.6 Explore functions.R goal models 8.7 Calculate with tailored models 8.8 Calculate with tailored data and models 8.9 Chapter Recap", " Chapter 8 Calculations: basic workflow The purpose of Chapter 8 is to introduce you to the basic workflow for calculating OHI scores. This is a 2-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository that is used throughout this chapter. 8.1 Overview Calculating scores with the OHI Toolbox requires a tailored repository operating with the OHI R package ohicore. The tailored repo has information specific to your assessment — most importantly the data and goal models — and ohicore will combine these with core operations to calculate OHI scores. You will always start with a tailored repository that has data and models extracted from the most recent Global OHI assessment. This training will introduce the basic workflow for calculating scores. There are many ways to build from the ‘out-of-the-box’ tailored repo you have instead of starting an assessment from scratch. For example, you may want to just change underlying data sources within the models, or completely change the models which also requires new data layers and data sources. We will repeat the basic workflow four times, each time adding complexity. We will calculate scores with: ‘out of the box’ data and models extracted from a recent global assessment tailored data (with ‘out of the box’ models) explore Configure Toolbox section explore functions.R tailored models (with ‘out of the box’ data layers) tailored data and models (adding a new data layer / model variable) The workflow depends on the calculate_scores.Rmd file found the scenario folder of any tailored repo. We’ll also dive deeper into the code itself, focusing particularly on developing goal models in functions.R. Note: earlier Toolbox versions have calculate_scores.R which calls configure_toolbox.R. Now, calculate_scores.Rmd has a section named “Configure Toolbox,” which has the equivalent code so it is possible to follow along with this tutorial even if your repository does not have the .Rmd. This is a lot to cover in a 2-hour training, and the purpose is to give you big take home messages and experience for what you need to begin calculating scores. But the Toolbox has a lot of moving parts, and we cannot cover all of it here. There are a lot of details and other operations that we won’t get into here and that will be coming in future tutorials (including tailoring pressures &amp; resilience, and how to change subgoals). 8.1.1 Prerequisites Before the training, please make sure you have done the following: Have up-to-date versions of R and RStudio and have RStudio configured with Git/GitHub https://cloud.r-project.org http://www.rstudio.com/download http://happygitwithr.com/rstudio-git-github.html Fork the toolbox-demo repository into your own GitHub account by going to https://github.com/OHI-Science/toolbox-demo, clicking “Fork” in the upper right corner, and selecting your account Clone the toolbox-demo repo from your GitHub account into RStudio into a folder called “github” in your home directory (filepath “~/github”) Get comfortable: be set up with two screens if possible. You will be following along in RStudio on your own computer while also watching an instructor’s screen or following this tutorial. 8.2 Review the Toolbox file ecosystem Let’s quickly review some of the files you have in the toolbox-demo repo that we saw in Chapter 6. Remember that the ecosystem structure of any tailored repo is the same, so as you learn to navigate through and calculate scores in this repo you are also learning how to navigate through and calculate scores in any other OHI assessment repository — yours or anyone else’s. This figure highlights the files we will focus on in this tutorial (others are grayed out). In our toolbox-demo repo, here are a few additional things to mention: our scenario folder is called region2017 goal models are R functions all stored in conf/functions.R regions are listed (with area) in spatial/regions_list.csv. We have 8 here. 8.3 Calculate with ‘out-of-the-box’ data and models The first time we go through the basic workflow will be with ‘out-of-the-box’ data and models from the global assessment. calculate_scores.Rmd is the file that you’ll use a lot — mostly to run piece-by-piece as you develop your models. It takes inputs (data and models) from your repository and uses the OHI R package ohicore to compute OHI scores. It has several components which we will explore in turn in the rest of the tutorial. calculate_scores.Rmd will load the libraries you need and ohicore will check your book-keeping and configuration, and calculate OHI scores. Ultimately, it will save the scores for each goal and dimension in scores.csv. The ‘dimensions’ of OHI goal scores are Status, Trend, Pressures, Resilience, Likely Future State, and overall goal Score. Dimensions are calculated for each goal in a specific order, as we will see below. calculate_scores.Rmd will combine information from your tailored repository and calculate scores with OHI core functions from ohicore. Open region2017/calculate_scores.Rmd and let’s have a look at its operations. We will then run it line-by-line. calculate_scores.Rmd is an RMarkdown file, which combines simply formatted text and R code and is really amazing for communication, including our OHI websites (see a 1-minute video here). For now, we will focus on the .Rmd file within the RStudio pane, and see that written text appears with a white background and R code appears with a grey background as a “code chunk.” You can run R code line-by-line, or as a whole chunk by clicking the green triangle at the top-right corner of the code chunk’s grey box. Each of the following steps is its own section and code chunk within calculate_scores.Rmd. 8.3.1 Install packages, including ohicore Note: Previous versions of the Toolbox had install_ohicore.r as a separate file, but the effect is the same. OHI requires packages created by others in the R community as well as one we developed ourselves. This is something that only needs to be done one time. I think of it as wiring a building for electricity: once it’s done, it’s done. Let’s run these line-by-line if you don’t have them installed already. ohicore is an R package developed by the OHI team that has all the essential core functions and supporting packages you will use to develop your assessment and calculate scores. ## install packages from R community install.packages(&quot;tidyverse&quot;) install.packages(&quot;zoo&quot;) install.packages(&quot;here&quot;) install.packages(&quot;devtools&quot;) ## install the ohicore package from OHI team devtools::install_github(&#39;ohi-science/ohicore@dev&#39;) 8.3.2 Load R packages Next, you will load each R package as a library from the toolbox-training repository whenever you work on your assessment to gain access to all those functions and packages. That is like turning on the lights when you need to use them; you need to do this every time you open your assessment repository. We will also set the working directory, because the ohicore package expects you to be inside your scenario folder (this will be improved further another time). We will use the new here package, which will identify the full filepath on your computer and will make collaborating easier between us. ## load package libraries library(tidyverse) library(stringr) library(zoo) library(here) library(ohicore) ## set the working directory to a filepath we all have setwd(here::here(&#39;region2017&#39;)) 8.3.3 Configure the Toolbox Next, we will configure the toolbox from within calculate_scores.Rmd. Let’s run the whole code chunk by clicking the green arrow at the top-right. There is output printed to the console that lists all of the layers registered, and ends with any warning messages about the layers themselves. We will explore what is happening here and how to interpret these warning messages further on; for now, let’s move on since we have not encountered an error. conf &lt;- ohicore::Conf(&#39;conf&#39;) ## check that scenario layers files in the \\layers folder match layers.csv registration. Layers files are not modified. ohicore::CheckLayers(&#39;layers.csv&#39;, &#39;layers&#39;, flds_id=conf$config$layers_id_fields) ## load scenario layers for ohicore to access. Layers files are not modified. layers &lt;- ohicore::Layers(&#39;layers.csv&#39;, &#39;layers&#39;) ## select corresponding data year to use for pressures and resilience scenario_years &lt;- 2016 layers$data$scenario_year &lt;- scenario_years # cc_acid # cc_slr # ... # tr_travelwarnings # Warning messages: # 1: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : # Unused fields... # ico_spp_iucn_status: iucn_sid # 2: In ohicore::CheckLayers(&quot;layers.csv&quot;, &quot;layers&quot;, flds_id = conf$config$layers_id_fields) : # Rows duplicated... # ico_spp_iucn_status: 816 8.3.4 Calculate Scores Now let’s continue with the next code chunk in calculate_scores.Rmd, which first runs CalculateAll(). Notice too that we are saving the output to a variable called scores. Instead of running the whole code chunk here, let’s just run this single line. Note: the prefix ohicore:: is a way to be explicit that the CalculateAll() is part of the ohicore package. ## calculate scenario scores scores &lt;- ohicore::CalculateAll(conf, layers) 8.3.4.1 Output: Status and Trend CalculateAll() first calculates the Status and Trend for every goal and subgoal. These models are in your tailored repository’s functions.R (we will explore functions.R below). You can choose to add messages to print during calculation like is shown below for Mariculture (MAR). # Running Setup()... # Calculating Status and Trend for each region for FIS... # Calculating Status and Trend for each region for MAR... # 95th percentile for MAR ref pt is: 0.0758396517531756 # ... 8.3.4.2 Output: Pressures and Resilience Next, we see output as CalculateAll() calculates Pressures and Resilience based on the pressures and resilience matrix tables in your tailored repository. For each, ohicore lists the subcategories that will be calculated, and identifies any mismatches between data layers identified but not used or missing. We will learn more about the pressures and resilience matrices in a different Chapter. # Calculating Pressures for each region... # There are 6 pressures subcategories: pollution, alien_species, habitat_destruction, fishing_pressure, climate_change, social # These goal-elements are in the weighting data layers, but not included in the pressure_matrix.csv: # LIV-aqf # These goal-elements are in the pressure_matrix.csv, but not included in the weighting data layers: # CP-coral, CP-mangrove, CP-saltmarsh, CS-mangrove, CS-saltmarsh, HAB-coral, HAB-mangrove, HAB-saltmarsh, HAB-seagrass, LIV-ph, LIV-tran, CP-seaice_shoreline, HAB-seaice_edge, ECO-wte, LIV-wte, LIV-sb # Calculating Resilience for each region... # There are 7 Resilience subcategories: ecological, alien_species, goal, fishing_pressure, habitat_destruction, pollution, social # These goal-elements are in the resilience_matrix.csv, but not included in the weighting data layers: # CP-coral, CP-saltmarsh, CS-saltmarsh, HAB-coral, HAB-saltmarsh, HAB-seagrass, CP-mangrove, CS-mangrove, HAB-mangrove, HAB-seaice_edge, CP-seaice_shoreline 8.3.4.3 Output: Combine Dimensions Finally, we see output as CalculateAll() combines the dimensions above in several ways. It calculates the Goal Scores and Likely Future State for each goal and subgoal. Then, it calculates ‘supragoals,’ which are goals that have subgoals, for example Food Provision (FP), which has the subgoals FIS (Wild-caught Fisheries) and Mariculture (MAR). Finally, it calculates the overall Index score for the entire Assessment Area using an area-weighted average. # ... # Calculating Goal Score and Likely Future for each region for FIS... # Calculating Goal Score and Likely Future for each region for MAR... # ... # Calculating post-Index function for each region for FP... # Calculating post-Index function for each region for LE... # Calculating Index score for each region for supragoals using goal weights... # Calculating Likely Future State for each region for supragoals using goal weights... # Calculating scores for ASSESSMENT AREA (region_id=0) by area weighting... # Calculating FinalizeScores function... 8.3.4.4 Output: Warning Messages Following all the calculations are the warning messages, which are due to operations within functions.R, which you will be able to fix as you tailor your goal models. These warning messages are due to using goal models from the global assessment with just a subset of data from the global assessment we have extracted here for the toolbox-demo repository. # Warning messages: # 1: In left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y) : # joining factors with different levels, coercing to character vector # ... # 8: In max(d$x, na.rm = T) : # no non-missing arguments to max; returning -Inf 8.3.5 Save scores variable as scores.csv Finally, we will save the output from CalculateAll(), a variable called scores, as a comma-separated-value file called scores.csv. We will do this by running the second line of code in this code chunk. ## save scores as scores.csv readr::write_csv(scores, &#39;scores.csv&#39;, na=&#39;&#39;) We can inspect it and see that it is a long-formatted file with four columns for the goal, dimension, numeric region identifier, and score. goal dimension region_id score AO future 0 92.85 AO future 1 92.85 AO future 2 92.85 … … … … AO pressures 1 37.75 AO pressures 2 37.75 … … … … We have 8 regions in the toolbox-demo repo. An additional region 0 is the area-weighted combination of all regions. Note: each region in your assessment will have a numeric region identifer, called a region_id or rgn_id for short. You can see a list of all regions and corresponding identifiers in toolbox-demo/region2017/spatial/regions_list.csv 8.3.6 Error messages Hopefully this first time through calculate_scores.Rmd you did not encounter error messages, but you definitely will as you move ahead. Error messages are often due to typos or miscommunications between what you tell R versus what it expects. You will encounter error messages due to R itself, and due to ohicore. Error messages often have human-friendly messages to alert you to what went wrong, and we are continually improving error messages you’ll encounter when you use ohicore so you can try to solve them more easily. Some commonly occurring errors and how to fix them can be found in the Troubleshooting section of the manual. Copy-pasting error messages into Google is also one of the best places to start. 8.3.7 Create figures Two common plots to represent scores are flower plots and maps. We will walk through an example of the flower plot code here. Note: you’ll see that we are sourcing code from another OHI repository, where this code was developed. After we finish testing it, we will add it as a function to ohicore and then you will not need to source it anymore. ## source script (to be incorporated into ohicore) source(&#39;https://raw.githubusercontent.com/OHI-Science/arc/master/circle2016/plot_flower_local.R&#39;) PlotFlower(assessment_name = &quot;Toolbox Demo&quot;, dir_fig_save = &quot;reports/figures&quot;) The default arguments is to create a flowerplot for every region and region 0, although you can modify this. When we run this code now you will see that the figures were in fact recreated (the timestamps for the figures in the File pane of RStudio have updated) but are not different from the previous ones so they do not show up in the Git window. 8.3.8 Recap of first calculate_scores.Rmd run We have just successfully run through the basic workflow to calculate OHI scores. It first loads necessary packages, configures data and models, and then it calculates all the components of OHI scores (status, trend, pressures, resilience, overall scores), and finally it saves the new OHI scores object in a .csv file. We will build on this basic workflow, by exploring the operations above in more detail, and by updating the data, models, and configurations within the toolbox-demo repository. 8.4 Calculate with tailored data Now let’s run through this basic workflow a second time, building on what we’ve learned. Here, we will focus on one of the layers for the Artisanal Fishing Opportunity (AO) goal. We will prepare local data that will substitute global data for the data layer ao_access and recalculate scores without modifying the goal model itself. It’s a good idea to go to RStudio’s Session menu and select Restart R to make sure you have a clean working directory. 8.4.1 Prepare and save our data layer While Chapter 7 shows in detail how to prepare data layers, save them in the “layers” folder, and register them in layers.csv and scenario_data_years.csv so the Toolbox knows where to find them, we have prepared a shorter example with AO for our purposes here. Open toolbox-demo/prep/AO/access_prep.R and source it after reading it through. The result will be a new data file called “ao_access_demo2017.csv” saved to the “layers” folder, and you should see that there is a new file saved in your Git window. 8.4.2 Register in layers.csv Now that we have prepared and saved our data layer, we’ll register it in layers.csv. layers.csvis a registry that will direct ohicore to appropriate data layers, and has information about each data layer — which goal it is used for, filename, column names, etc. For further detail see Chapter 7. There is a data layer for ao_access that is already registered in layers.csv, but it is currently created from a file called “ao_access_gl2017.csv.” We will update this so the data layer is created from our new demo file (“ao_access_demo2017.csv”); this happens in the “filename” column of layers.csv. Open region2017/layers.csv in a spreadsheet software (i.e. Microsoft Excel or Open Office). Next, find ao_access in the “layer” column. Where it says “ao_access_gl2017.csv,” update this to say “ao_access_demo2017.csv” — the new data layer you just saved. Save this and close Excel. IMPORTANT! Be sure to close Excel after you have made these edits. On a PC, having layers.csv open in Excel will prohibit it from being accessed from R, and the Toolbox needs access to calculate scores! 8.4.3 Register in scenario_data_years.csv Next let’s go to region2017/conf/scenario_data_years.csv. We can open this in RStudio: when you click on its name in the Files pane, select “View File.” scenario_data_years.csv is a registry to organize year information for each layer, and helps set you up from the very beginning to be able to calculate repeated assessments. When you calculate OHI scores, you will be explicit about the year your completed assessment represents, and we call this the scenario_year. data_year is the most recent years available for that data layer. Let’s look at the ao_access layer. It turns out that the same data_year, 2013, is used for all scenario_years 2008:2017. This means that this data source has not been updated through time so the trends that are calculated will be flat. We can double-check our “ao_access_demo2017.csv” file to see that 2013 is the most recent data that we have. This means that our data layer is already registered here in scenario_data_years.csv and we do not need to make any changes. Depending on your local data, registering in scenario_data_years.csv may be more like confirming the information that is already registered. Should you delete some of those previous years? Well, the Trend calculations require at least 5 years of data or the Toolbox will give errors. You can delete some of the earliest years to remove some clutter (left over from the global assessment), definitely rerun calculate_scores.Rmd afterwards to make sure that there are no unexpected changes to scores.csv (As a side note, this would be a good data layer to substitute if you had better local information through time.) 8.4.4 Rerun calculate_scores.Rmd Now, let’s rerun calculate_scores.Rmd. ohicore will now use your tailored data when it creates the “ao_access” layer because you’ve registered it in layers.csv and scenario_data_years.csv and the file is available in the layers folder. 8.4.5 Check our work, plot, and sync Whenever there are changes made to your files (additions, deletions, and modifications), you will be notified in the Git window, since Git is tracking the files in this repo. This is a good place to confirm you have did the things you set out to do, and you can also see if you errantly did anything you didn’t mean to. So here, you added a new data layer and after calculating scores you expect to see changes to AO scores in score.csv. layers.csv will also change because ohicore will update fields in this file as it runs through its checks. But we don’t expect any other files to change at this point, so let’s make sure that’s true. Now let’s recreate the flower plots with our updated goal model. You’ll see those .png’s show up in the Git tab as well. Although we can’t inspect the differences between the figures through RStudio here, we will be able to see them on GitHub.com. Now is a good time to commit this work and sync to GitHub. That way, the work we’ve done is committed together and we will have a clean slate (from a Git sense) moving forward. I’ll use the commit message “toolbox-training: tailor ao_access layer and rerun calculate_scores.Rmd” Now, we can inspect on GitHub.com: 8.4.6 Recap of second calculate_scores.Rmd run One way to tailor your assessment is to substitute data for an existing data layer. We have just run through the basic workflow a second time. This time we successfully: substituted the global OHI data layer ao_access with new data, which includes saving it in layers folder, registering it in layers.csv and scenario_data_years.csv, and reran calculate_scores.Rmd without modifying the goal model itself checked scores.csv changes in the Git tab to make sure all changes were expected 8.5 Explore Configure Toolbox So now let’s take a closer look at the Configure Toolbox section, the first code chunk following library install and loading in calculate_scores.Rmd. This code chunk combines everything required to calculate OHI scores and checks that they are properly formatted and available, and will minimize potential errors later on. It makes sure that your data and goal models are ready to be used to calculate scores. Important: Any time you make a change to a data layer or a goal model and want to recalculate scores, you will need to re-run the Configure Toolbox code chunk to have ohicore operate on the most up-to-date information. You can click the green triangle at the top right corner of the grey code chunk to run all the lines at the same time. We’ll walk through line-by-line now. 8.5.1 ohicore::Conf() The Conf() function from ohicore (represented in code with the ohicore::Conf() syntax prepares for the next steps of running the Toolbox, and calls forth everything you need to calculate scores: goal models other OHI parameters that determines how OHI scores are calculated ## load scenario configuration conf &lt;- ohicore::Conf(&#39;conf&#39;) This function provides no output in the console, but does save a conf object that you can see in the Environment tab of RStudio. 8.5.2 ohicore::CheckLayers() The CheckLayers() function from ohicore checks that data layers are properly formatted and registered (e.g., that each data layer in layers.csv exists in the layers folder), and returns a list of all of the layers that are registered in the console. Check to make sure ours is there. This is a gate-keeping step by to make sure the data layers you’ve entered are in the right format and can be read by ohicore properly. ## check that layers in the layers folder match layers.csv registration. ohicore::CheckLayers(&#39;layers.csv&#39;, &#39;layers&#39;, flds_id=conf$config$layers_id_fields) In the R console, you will see a list of all data layers registered, and there will be additional warning information about specific layers at the end. You should not get an error at this point, but if you do, the list will stop printing where the error occurs, which will help you troubleshoot. 8.5.2.1 Warning messages Warning messages alert you to problems with specific layers: this is showing that there are unused fields and duplicate rows. These warning messages are not a problem now (they are a byproduct of extracting this repo based on global assessments; you’ll be changing this layer anyways). Unused fields... ico_spp_iucn_status: iucn_sid le_jobs_sector_year: analysis_year le_wage_sector_year: analysis_year Rows duplicated... ico_spp_iucn_status: 952 le_jobs_sector_year: 144 le_wage_sector_year: 120 Layers missing data, ie all NA ... element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection_gl2017.csv element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage_gl2017.csv element_wts_hab_pres_abs: element_wts_hab_pres_abs_gl2017.csv You will encounter error messages as you develop your own assessment. These messages intend to alert you that there are errors in data entry. Some common errors are: improper formatting or missing columns in your data layer typos or misnamed columns Warning messages (and error messages) most often have information about what is wrong so that you can fix it. When in doubt, use Google! You’re not the first person to see an error or warning message. If a specific file or object isn’t named for you to inspect, you can copy-paste the messages directly into Google to see what the cause could be. 8.5.3 ohicore::Layers() The next operation in the Configure Toolbox code chunk is the Layers() function from ohicore, which combines all the information from the layers files and layers.csv into a single R object called layers. This object will be used to calculate scores. ## load scenario layers for ohicore to access. layers &lt;- ohicore::Layers(&#39;layers.csv&#39;, &#39;layers&#39;) We may see some warning messages due to the data being extracted from global assessments, but otherwise we do not expect output here. Note: to inspect a specific layer in the layers object, you can do this with layers$data$LAYER_NAME. So to quickly inspect the ao_access layer we can type layers$data$ao_access into the console. You can see there has been an additional column added to identify the layername. rgn_id year value layer 1 1 2013 0.09680860 ao_access 2 2 2013 0.07088916 ao_access 3 3 2013 0.05217424 ao_access 4 4 2013 0.17266718 ao_access 5 5 2013 0.06821116 ao_access 6 6 2013 0.09653261 ao_access 7 7 2013 0.09848508 ao_access 8 8 2013 0.14124868 ao_access 8.5.4 Assign scenario years The final part of the Configure Toolbox code chunk is to assign the scenario year, which is required for ohicore to properly calculate pressures and resilience. After assigning the scenario year, we add this to the layers object. This seems a bit redundant now, but it is some set-up for if you were going to assess multiple years at the same time (which we are not doing in this tutorial). ## select scenario year for the assessment scenario_years &lt;- 2017 layers$data$scenario_year &lt;- scenario_years There should not be any output in the console after running this code, but the objects in the Environment pane of RStudio have been updated. 8.5.5 Recap of Configure Toolbox We have explored each component of the Configure Toolbox section, which sets up for calculations by creating objects after checking that your models and data layers are formatted and registered properly. 8.6 Explore functions.R goal models Now, let’s explore a goal model. If we look in calculate_scores.Rmd, the code chunk that follows the Configure Toolbox section is to calculate scores using ohicore::CalculateAll(). This means that ohicore is running through the goal Status and Trend models, which are each R functions in the file functions.R. functions.R is in the conf folder of your tailored repo. We can navigate to it: region2017/conf/functions.R. In functions.R, each goal’s Status and Trend model is represented as an R function. You will be able modify the goal model within the confines of each function. You can run all of them at the once or each individually. Let’s look at the goal model for Artisanal Fishing Opportunity (AO) to continue our example. It has models developed from the most recent global assessment as a place for you to start ‘out-of-the-box.’ Tip: Clicking the bottom left corner of Console will show you a drop-down menu of all functions. It’s a shortcut to jump to the appropriate section or goal model When you modify an individual goal model, you will only work within that function’s curly braces { }. The following things happen in each goal model: set scenario year variable and any other constant variables load specific data layers with ohicore::AlignDataYears() (recommended over the depreciating ohicore::SelectLayersData()) calculate Status scores calculate Trend scores combine Status and Trend scores format and return the scores object Throughout functions.R, you will see syntax from the tidyverse package that you installed and loaded. It contains the commonly used data-wrangling functions you’ll need in almost every analysis, and enables chaining: %&gt;%. To learn more, take a look at tidyverse.org. This cheatsheet is also a helpful guide with quick references to each function. Tip: changes must be saved before it is recorded by Git and reflected in the Git window. When new changes are made, the title of your R script will be shown in red color with an *. It will change back to black once the changes are saved. Now that we’ve had this overview looking at this goal model, let’s run the code. Remember, we have already loaded the libraries we need, and run the Configure Toolbox code. 8.6.1 Load specific data layers with AlignDataYears() AlignDataYears() is an ohicore function to call the appropriate data layers by its layer name registered in layers.csv (e.g. ao_access). Note: previous versions of the Toolbox use the function SelectLayersData(), which still operates correctly, but only for assessments for single years. As we have updated the Toolbox to streamline repeated assessments, AlignDataYears() is the preferred function to use. Run the first few lines of code and the ao_access and ao_need layers will be loaded, joined into an ry, and ready to be manipulated further: Sustainability &lt;- 1.0 scen_year &lt;- layers$data$scenario_year r &lt;- AlignDataYears(layer_nm = &quot;ao_access&quot;, layers_obj = layers) %&gt;% rename(region_id = rgn_id, access = value) %&gt;% select(-layer_name) %&gt;% na.omit() ry &lt;- AlignDataYears(layer_nm = &quot;ao_need&quot;, layers_obj = layers) %&gt;% rename(region_id = rgn_id, need = value) %&gt;% select(-layer_name) %&gt;% left_join(r, by = c(&quot;region_id&quot;, &quot;scenario_year&quot;)) It’s always a good idea to check what your data looks like and make sure there are no glaring errors. We can explore what this ry object using functions like head(), summary(), and str(). We can write this in the console, or we can add it to the functions.R directly (although I would probably comment it out after I’m done testing). head(ry) summary(ry) str(ry) At this point you have probably spent a lot of time preparing these data, but errors can still arise. Things that I would look for: are there NA’s? Do I expect them? 8.6.2 Goal models The goal model that was developed for global assessments and described in Halpern et al. 2012 (see current Supplemental Information here) states that the status for this goal is represented by unmet demand (Du), which includes measures of opportunity for artisanal fishing, and the sustainability of the methods used. \\[ D_{U} = (1 - need) * (1 - access) \\] \\[ status = (1 - D_{U}) * sustainability \\] And this is how it looks in R: ## model ry &lt;- ry %&gt;% mutate(Du = (1 - need) * (1 - access)) %&gt;% mutate(status = (1 - Du) * Sustainability) # head(ry); summary(ry) 8.6.3 Calculate Status The status operation in this model is largely filtering out just the recent year of all the years you have calculated in the model above. # status ao_status &lt;- ao_model %&gt;% dplyr::filter(year==status_year) %&gt;% dplyr::select(region_id, status) %&gt;% dplyr::mutate(status=status*100) 8.6.4 Calculate Trend Next is the Trend scores. They are typically based on linear regression of status scores from the most recent five years (inspect the trend_years object below to confirm!). The trend is calculated with the CalculateTrend() function from ohicore. # trend trend_years &lt;- (scen_year - 4):(scen_year) r.trend &lt;- CalculateTrend(status_data = ry, trend_years = trend_years) We can inspect r.trend: it returns a dataframe with 3 columns: region_id, score, and dimension. 8.6.5 Scores variable: combining Status and Trend Combining the Status and Trend into the scores variable involves selecting only the region_id and score columns, and adding two more columns identifying score dimension (Status or Trend) and goal name. # return scores scores &lt;- rbind(r.status, r.trend) %&gt;% mutate(goal = &#39;AO&#39;) The scores variable is something that you’ll see at the end of every goal model. Each function ends with returning the scores variable, so that ohicore can combine all scores together when CalculateAll() runs (but we won’t run return(scores) now. The scores variable has a specific format, with four columns. region_id score dimension goal 1 1 94.93492 status AO 2 2 94.93492 status AO 3 3 94.93492 status AO 4 4 94.93492 status AO 5 5 94.93492 status AO 6 6 94.93492 status AO 7 7 94.93492 status AO 8 8 94.93492 status AO 9 1 0.01270 trend AO 10 2 0.01270 trend AO 11 3 0.01270 trend AO 12 4 0.01270 trend AO 13 5 0.01270 trend AO 14 6 0.01270 trend AO 15 7 0.01270 trend AO 16 8 0.01270 trend AO 8.6.6 Recap of exploring functions.R functions.R is a collection of goal models to calculate Status and Trend. Each goal is written inside an R function and can have the following steps: set scenario year variable and any other constant variables load specific data layers with ohicore::AlignDataYears() (recommended over the depreciating ohicore::SelectLayersData()) calculate Status scores calculate Trend scores combine Status and Trend scores format and return the scores object 8.7 Calculate with tailored models Now let’s run through the basic workflow a third time, this time modifying a goal model but keeping all data layers the same. We will do this without making any changes to the data layers at the moment. Tailoring a goal model involves editing the operations within that goal’s model in functions.R. 8.7.1 Restart R, Libraries, Configure Toolbox First let’s restart R and rerun the Load Libraries and Configure Toolbox sections in calculate_scores.Rmd. Now, we are all set to dive into the models in functions.R. 8.7.2 Tailor AO goal model Now, let’s go to functions.R, to the AO model. As an example, we will do something pretty simple to tailor the goal model. Let’s say we just wanted to divide the variable Du by 2 in the equation. # model ry &lt;- ry %&gt;% mutate(Du = (1 - need) * (1 - access)) %&gt;% mutate(status = (1 - Du/2) * Sustainability) We can run the rest of the AO function line-by-line and inspect the scores variable at the end to see if everything looks OK. 8.7.3 Calculate scores, check, plot, and sync Now let’s run the Calculate Scores chunk and save scores.csv. We can use Git’s differencing feature to see how our scores have changed. This is a great way to double-check and error-check that things are working the way you expected. We can also recreate the flower plots with our updated goal model. Then let’s commit and sync so we can see the differences on GitHub.com. My commit message here will be “toolbox-training: tailor AO goal model with original data layer.” 8.7.4 Recap of third calculate_scores.Rmd run In this third time through the basic workflow, we updated the goal model without changing any of the data layers that it depends upon. Next up, we will add a new data layer for it to work with. 8.7.5 Troubleshooting If you’ve tailored a goal model function, you need to make sure that its output is still a data frame, and one that is not grouped. Otherwise, when you run calculate_scores.Rmd, you may get a cryptic error. Examples of some of the ones we’ve seen are: # Error in left_join_impl(x, y, by$x, by$y, suffix$x, suffix$y, check_na_matches(na_matches)) : # Can&#39;t join on &#39;region_id&#39; x &#39;region_id&#39; because of incompatible types (integer / list) We are constantly improving ohicore with more human-readable error messages, but it is still best practice to ensure your goal model output is returning a dataframe. You can do this in a few ways. The way we commonly do this is by adding ungroup() or as.data.frame() as the final step before returning the scores variable at the end of a goal model function. 8.8 Calculate with tailored data and models The fourth and final example we will do in this chapter is to tailor a goal model by adding a new variable. This will mean that we will prepare, save, and register a new data layer and update the goal model in functions.R. It will be a combination of what we’ve done previously in this chapter. Let’s restart R before proceeding. Let’s say, as an example, that we want to tailor the AO goal model by adding a new variable for poverty into the equation. \\[ D_{U} = (1 - (need + poverty) / 2) * (1 - access) \\] \\[ status = (1 - D_{U}) * sustainability \\] 8.8.1 Prepare and save our new data layer We will create the new data layer for poverty by running a script in the prep folder. Open toolbox-demo/prep/AO/poverty_prep.R and source the file after reading it through. The result will be a new data layer saved to the “layers” folder, and you should see that there is a new file saved in your Git window. 8.8.2 Register in layers.csv Now that we have prepared and saved our data layer, we’ll register it in layers.csv. This time, since we have added an additional data layer that has not been previously registered, we need to add a new row. Open region2017/layers.csv in a spreadsheet software (i.e. Microsoft Excel or Open Office). Add a new row for “ao_poverty,” and fill in the following information. We’ve added the row near the other AO data layers. 8.8.3 Register in scenario_data_years.csv 8.8.4 Configure Toolbox To use this layer as we develop our goal model, we need to rerun the Configure Toolbox section. Before that, let’s restart R, and reload the libraries. It’s good to restart R often so that you don’t introduce errors later (that could be because your work is dependent on something that shouldn’t be there, like in our layer preparation). 8.8.5 Update the AO goal model We will need to do two things to update the goal model in functions.R. First, we’ll have to load our data layer with AlignDataYears(). You can copy-paste the following into your functions.R to make sure everything is working properly: Sustainability &lt;- 1.0 scen_year &lt;- layers$data$scenario_year r &lt;- AlignDataYears(layer_nm = &quot;ao_access&quot;, layers_obj = layers) %&gt;% rename(region_id = rgn_id, access = value) %&gt;% select(-layer_name) %&gt;% na.omit() rp &lt;- AlignDataYears(layer_nm = &quot;ao_poverty&quot;, layers_obj = layers) %&gt;% rename(region_id = rgn_id, poverty = value) %&gt;% select(-layer_name) %&gt;% left_join(r, by = c(&quot;region_id&quot;, &quot;scenario_year&quot;)) ry &lt;- AlignDataYears(layer_nm = &quot;ao_need&quot;, layers_obj = layers) %&gt;% rename(region_id = rgn_id, need = value) %&gt;% select(-layer_name) %&gt;% left_join(rp, by = c(&quot;region_id&quot;, &quot;scenario_year&quot;)) Let’s run this and inspect the variables. Note: if you forgot to add ao_poverty as a new layer to scenario_data_years.csv in the section above, you wouldn’t get an error, but when your rp variable wouldn’t read any any data, it would be a dataframe with 0 rows! That is why it’s important to inspect all these variables so you can trace back where the problem is as early as possible. Alright. Next, we’ll tailor the goal model itself. Here is how the goal model looks as an equation and in R: you can copy-paste this model into functions.R, replacing the existing model. \\[ D_{U} = (1 - (need + poverty) / 2) * (1 - access) \\] \\[ status = (1 - D_{U}) * sustainability \\] ## tailored goal model with poverty ry &lt;- ry %&gt;% mutate(Du = (1 - (need + poverty) / 2 ) * (1 - access)) %&gt;% mutate(status = (1 - Du) * Sustainability) 8.8.6 Calculate scores, check, and sync Everything is looking good in functions.R and in the Git tab that we’re looking at as we go along. Now let’s restart R and recalculate scores in calculate_scores.Rmd. We’ll see that scores.csv will also update, and we can check that only AO dimensions (except pressures and resilience since we haven’t changed them) and Index scores are affected. Let’s commit and sync. My commit message will be “toolbox-training: tailor AO goal model with a new data layer.” 8.8.7 Recap of fourth calculate_scores.Rmd run In this run we combined what we have practiced in the previous two runs, and we successfully: created a new data layer, which includes preparing layer in the prep file, saving it in layers, and registering it in layers.csv and scenario_data_years.csv added this new model variable (ie. new layer) in AO model in functions.R reran calculate_scores.Rmd and saw the changes reflected in Git 8.9 Chapter Recap We have completed Chapter 8 and successfully run through the basic workflow to calculate OHI scores with several variations using our toolbox-demo repository. Each variation involves the same basic workflow of bookkeeping and running calculate_scores.Rmd, and will enable you to begin tailoring the Toolbox for your assessment. ‘out of the box’ data and models extracted from the Global 2016 assessment tailored data and ‘out of the box’ models tailored data and models tailored (new) data and models Also, a few best practices we have used throughout this training that are good to remember: Compulsively restart R Always check Git window after each change for expected changes Commit, then Pull before Push Rerun the Configure Toolbox code chunk after any data layer or model changes Save functions.R before the changes are reflected in Git window Close Excel before returning to R (this is less important on a Mac but will cause errors on a PC) "],["press-resil.html", "Chapter 9 Pressures and Resilience 9.1 Overview 9.2 Identifying indicators 9.3 Pressures 9.4 Resilience", " Chapter 9 Pressures and Resilience The purpose of this chapter is to introduce you to updating pressures and resilience information for calculating OHI scores. This is a 2-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository that is used throughout this chapter. 9.1 Overview Pressures and Resilience are two of the four dimensions used to evaluate each goal or sub-goal, along with Status and Trend. The OHI R package ohicore will calculate pressures and resilience scores for you using information from pressures and resilience data layers and matrices. ohicore takes the data layers listed in the matrix (they are data layers similar to those for status: they need values for every region in your assessment) and calculates pressures and resilience scores. These scores will then affect the goals indicated in the matrix with a 1, 2, or 3 weighting. This means that you are responsible for updating the data within pressures and resilience layers so they best represent your assessment. Additionally, you can add and remove layers from the matrix, and change which goals they affect. 9.2 Identifying indicators Ideally, every pressure with an identified strong impact should have a corresponding resilience measure. The rationale is that as resilience in the study area increase (for instance, by improving environmental regulations), they would balance out and eventually neutralize the pressures. In time, this would lead to an increase in a goal’s status, and therefore the overall goal or sub-goal score. By including regulatory responses in your assessment, you ensure that the actions taken in your country are relevant to ocean health. In practice, however, the pressures and resilience measures you include in your assessment will be highly determined by data availability. It is best to first consider what pressures are acting in your study area and then determine if data are available to measure them. You should also decide if the pressures data included in the global assessment are relevant for your assessment and determine if local data better capture pressures for all the regions in your study area. When considering resilience measures, look for regulations or indicators that could be encompassed in one of the pressures categories. See Chapter 3 for more details. 9.3 Pressures The Toolbox calculates pressures in five ecological pressure categories (e.g., pollution, habitat destruction, fishing pressure, species pollution, and climate change) and one social pressure category (e.g. strength of governance). Under each category, there can be multiple pressure data layers. For example, the “pollution” category could include pathogen, nutrients, and chemical pollution. There are two types of pressures data you need to provide for the toolbox: data layers for each pressure and the pressure matrix. 9.3.1 Pressures data layers The pressures you will include in your assessment will depend on what is important in your study area and what data are available. If local pressures data are not available, you may default to using data from the global assessment, but this means in most cases that you will not have different information for each region. You will determine the weight ranks required in the pressures matrix only after you have identified the data you will include. The following steps outline the process of how to identify pressures in your assessment. The steps are iterative; return to previous steps to ensure you capture all important pressures in your study area: Begin by exploring pressures important to your study area. What are big stressors acting along your coastlines? Are data available to measure these stressors? If not, are other indirect measures or proxies available to represent these stressors? Evaluate the pressures included in the global assessment. For example, if there is no mariculture in your study area, you could remove pressures data layers that only affect this goal (i.e. genetic escapes). Also while examining the pressures included in the global assessment, are all of them relevant? Are there local data that can be substituted in the place of global data? Can you keep some of the global pressures? Determine the pressure category for any additional stressors in your study area, and add it to the pressures matrix. When all stressors are included in the pressures matrix, determine which goals they affect. Then, for each goal, determine the weight rankings of all stressors. Use literature and expert judgement to determine this. Prepare each pressure data layer as described in 7 only after steps 1-6 are completed. In addition to the proper formatting for the Toolbox, pressures data must be rescaled (normalized) on a unitless scale from 0 - 1, where 0 is no stressor at all and 1 is the highest possible value for the stressor. You will have to determine how to rescale the data, whether it is based on the highest value in the data range or other methods (like using the 95th quantile as a reference point). 9.3.2 Pressures matrix Independent from the pressures data layers, you will modify the Pressures Matrix table that establishes the relationships between stressors and goals, i.e. how each pressure measure affects each goal, or distinct components of a goal (e.g. an individual habitat type or natural product). It uses a rank from 1-3 to weight how strongly a given pressure affects a goal or sub-goal relative to all the other pressures affecting it. The rank weights used in the pressures matrix were determined by Halpern et al. 2012 (Nature) based on scientific literature and expert opinion (see Supplemental Table S28 of Halpern et al. 2012). For example, commercial high and low bycatch are categorical values that were set based on fishing gear type. This began as a list of gear types used, producing a range of potential bycatch frequencies (from local reports when possible), which can be rescaled. In the pressures matrix ranks are categorized as follows: 3 = high pressure 2 = medium pressure 1 = low pressure Scores from 1-3 are given to rank the importance of each pressure. Only values of 2 or 3 require that a resilience layer be activated when calculating the goal scores. Stressors that have no impact are left blank in the matrix rather than being assigned a rank of zero, which would affect the average score. Pressures are ranked rather than being represented as a binary (yes/no) measure because the range of consequence of different pressures on each goal can be quite large, and to classify all those pressures as a simple ‘yes’ would give too much influence to the weakest stressors. For example, food provision could be most heavily impacted by unsustainable, high-bycatch fishing, but pollution does have some impact on fish populations. Without a weighting system, these stressors would be treated equally in their impact on the food provision goal. Assigning the weights for stressors is pretty subjective to the other stressors, so it will be up to you to use your best judgement to assign weights. 9.3.3 How to modify Pressures Matrix and Categories in the Toolbox Your team will identify if any pressures layers should be added to the pressures matrix, and if so, which goals the pressure affects and what weight they should have. We can use the toolbox-demo repository that you forked earlier as a reference. You can transfer this information in pressures_matrix.csv (located in the toolbox-demo/region_2017/conf folder). It is important to note that the matrix identifies the pressures relevant to each goal, and which weight will be applied in the calculation. Each pressure is a data layer, located in the toolbox-demo/region_2017/layers folder. This means that pressure layers need information for each region in the study area, and some layers will need to be updated with local data. In modifying pressures, you will need to consider whether data layers can be updated or added, and whether data layers map onto goals appropriately in the local context. If you add a pressure layer to the layers folder, you will need to add the same layer to the pressures_matrix.csv, and vice-versa. Adding a new pressure to the pressures matrix requires the following steps: Create new pressure layer(s) and save in the layers folder Register pressure layer(s) in layers.csv Register in pressures_categories.csv Register in pressures_matrix.csv, identify the goals affected and set the weights Modify config.R for goals that have elements 9.3.4 Create the new pressure layers and save in the layers folder If you create a new data layer, give it a short but descriptive name that also includes a prefix that signifies the pressure category (for example: po_ for the pollution category). There are five physical categories and one social category: po_ = pollution hd_ = habitat destruction fp_ = fishing pressure sp_ = species pollution cc_ = climate change ss_ = social pressure So for example, po_trash is a pollution layer with trash on beaches, and sp_alien is species pollution due to alien (invasive) species. These new layers will have scores from 0 to 1, with values for each region in your study area, and will be saved in the layers folder. 9.3.5 Register the new pressure layers in layers.csv’ Let’s say you were adding two new pressures layers for desalination to the pressures matrix. You would then add two new rows in layers.csv, and register the new pressure layers by filling out the first eight columns for po_desal_in, and po_desal_out. 9.3.6 Register in pressures_categories.csv This is a table to record the name of each pressures data layer, its category, and subcategory. Each data layer name is the same name that is saved in the layers folder and is registered in layers.csv. Each layer falls under one of two categories - ecological or social pressures, and one of several subcategories to further represent the origin of the pressure (e.g. climate change, fishing, etc), which is also indicated by a prefix of each data layer name. Each pressure category is calculated separately before being combined with the others, so it is important to register the new pressure with the appropriate category prefix decided by your regional assessment team. In our example, we would add two rows for po_desal_in and po_desal_out. 9.3.7 Register in pressures_matrix.csv To have the pressures act on different goals, we must register the pressures in the matrix. pressures_matrix.csv identifies the different types of ocean pressures with the goals that they affect. Adding a new pressures layer to pressures_matrix.csv requires adding a new column with the pressure layer name. The columns element (and element_name) record habitat types for habitat-specific goals (eg. CS and CP) and industrial sectors for economy-based goals (eg. ECO). The rest of the column headers of the pressures matrix are the layer names of the pressures layer file that are saved in the layers folder and registered in layers.csv, matching what is recorded in the pressures_categories.csv. NOTE: Make sure to remove unused pressures layers from the layers.csv, pressures_matrix.csv and pressures_categories.csv. Otherwise ohicore will search for all the layers registered in those files and calculations will halt if it encounters pressure layers that do not exist. 9.3.8 Identify the goals affected and set the weighting This step also requires transferring prior decisions into pressures_matrix.csv. Mark which goals are affected by this new pressure, and then set the weighting. Pressures weighting by goal should be based on scientific literature and expert opinion (3 = highly influential pressure, 2 = moderately influential pressure, 1 = not very influential pressure). Remember that the rankings in the pressures matrix are separate from the actual data within the pressures data layers. The rankings ensure that within a particular goal (e.g. within a row of the pressures matrix), the stressors that more strongly influence the goal’s delivery have a larger contribution to that goal’s overall pressure score. Therefore, the rankings are assigned independently of the actual pressure scores, and only determine their importance within the calculations. 9.3.9 Modify config.R for goals with multiple elements If a goal has multiple elements (eg. CS has multiple habitats), as reflected in pressures_matrix.csv where the columns element (and element_name) are filled, you need to update config.R in conf folder, as shown below: The highlighted files are data layers necessary to calculate pressures for each of the goals with components. They contain weights, or relative contribution from each element to the total pressures of the goal. These weights are calculated separately in the data prep folder for each goal, and saved and registered as you would for any data layer. How to calculate these data layers can be found in the description column of layers.csv. 9.4 Resilience In addition to this chapter, these resources are available: ResilienceSlides.pptx ResilienceMeasures_BritishColumbia.pdf 9.4.1 How to identify and quantify resilience Resilience is included in OHI as the sum of the ecological factors and social initiatives (policies, laws, etc.) that can positively affect goal scores by reducing or eliminating pressures. The addition of new pressure layers may therefore warrant the addition of new resilience layers that were not previously relevant. Similarly, the removal of pressure layers may warrant the removal of now irrelevant resilience layers. You can then transfer this information into resilience_matrix.csv and resilience_categories.csv (located in the [toolbox-demo]/[region2017]/conf folder in the toolbox-demo repository). Ideally, each pressure included in the pressures matrix should have a corresponding resilience measure, which is meant to ‘balance’ the pressures that negatively effects on ocean health. The OHI considers resilience in two categories: ecological resilience to address ecological pressures, and social resilience to estimate how a region may be able to respond to or prevent environmental challenges. Additionally, goal-specific regulations are intended to address ecological pressures, and are measured as laws, regulations, and other institutional measures related to a specific goal. Ideally, for any resilience measure, you would have three tiers of information: Existence of regulations: Are regulations in place to appropriately address the ecological pressure? Implementation and enforcement: Have these regulations been appropriately implemented and are there enforcement mechanisms in place? Effectiveness and compliance: How effective have the regulations been at mitigating these pressures and is there compliance with these regulations? Ideally, information would exist for these three tiers, and you would be able to weight the resilience measure based on the quality of the information as 1 (existence of regulation), 2 (implementation and enforcement), or 3 (effectiveness and compliance). This approach is different from the way ranks are assigned in pressures, which is based on impact. However, in most cases, information is not available for these three tiers: often, the existence of regulations is all that is available, and this does not always vary by region. In some cases, you may want to consider building your own set of indicators to determine implementation and enforcement and effectiveness and compliance. 9.4.1.1 Ideal Approach Ideally, assessments of social resilience would include national-level and as well as local rules and other relevant institutional mechanisms that are meant to safeguard ocean health. In Global assessments, the focus has been on international treaties and indices, so your region may likely have more localized information and you can update the resilience matrix and resilience layers. There would also be information as to their effectiveness and enforcement. Information on social norms and community (and other local-scale) institutions (such as tenure or use rights) that influence resource use and management would be useful too. 9.4.1.2 Practical Considerations In practical terms, resilience is hard to define and finding data can be difficult. It is often difficult to find regulations and indicators that would directly ‘balance’ individual stressors, but it is worth the effort to explore what information is available in the local context and how it could be included as resilience measures. You may be able to construct your own set of indicators for resilience (particularly social resilience) using proxy data. Your team may have to get creative to develop appropriate assessment measures here. It can be metrically be defined as presence-versus-absence (value of zero or one), or on a scale (value between zero and one) if the measure is an assessment or score. For instance in global assessments, resilience measures that were counted in the socio-economic resilience class of data came from the World Governance Indicators (http://govindicators.org). In a regional context, however, a more appropriate data layer might be a local governance index of some kind, preferably developed by a reputable organization using credible methods. When available, national-level data are preferable to global-level data for your assessment. These include national laws on the environment, or protection of the marine environment or rivers that lead to coastal waters. National laws include things like the Clean Water Act (CWA) and the Endangered Species Act (ESA) in the U.S., or the national implementations of the E.U. Water Framework Directive. National actions can also be broadened beyond just legislation to include administrative procedures such as those involving permits, licenses, court cases, administrative action, and compliance mechanisms. State or province-level laws provide more regionally-specific information and thus work well for assessments. This would involve looking at the same types of laws and policies that exist on the national level, but specifically incorporating those that have been tailored to fit the needs of a particular sub-national area. This includes things such as California’s state-level California Environmental Quality Act (CEQA), or the California Ocean Protection Act (COPA), which have laws designed specifically to protect California’s environment. This would tell you more relevant information than using data from a national or international law. Local level regulations will usually provide you with the most accurate information for your assessment in order to tailor it best to the local context. 9.4.1.3 Scoring: Turning Qualitative into Quantitative There are several ways to turn the qualitative information of regulations and social actions into quantitative metrics for analysis. A robust way is to give credit for different aspects of the resilience measures. In addition to a score for having the law, policy, or action, in place, it is possible to gauge the effectiveness of that activity. The simplest way is to give credit for having a resilience measure in place. This means assigning a binary score of zero or one for “presence” versus “absence” of the resilience measure. For international conventions, this can be done by assigning a value of 1 for having signed a convention. A more rigorous score can be given for countries that have further ratified a convention in addition to signing it; this is one way to further differentiate scores. This can be done by seeing if a country has signed and ratified CITES. For example, if you were trying to find out if there are regulations in place that guide fishing pressure, you could look see if regulations exist for trawl-fishing limitations, or see if there are regulations for fish size, length, or if there are any seasonal restrictions. Another option would be to see if formal stock assessments exist for commercially-fished species. A further step is to assess how well those measures are being complied with. This will give you more robust way is to assess how well a resilience mechanism is working to maintain the integrity of the regulation and thereby the ecosystem. For example, once you have found out whether regulations for fishing pressure exist, you would then try to find values for compliance with these regulations. These could be raw data or calculated statistics such as rate of compliance or proportion of compliance. It should answer the question, “Are there indicators of compliance with fishing pressure guidelines?” A subsequent, and final, step to creating a robust resilience assessment is to determine whether there are enforcement mechanisms in place to deal with non-compliance of the regulations. This is because a regulation is only as good as its implementation, and having both enforcement and compliance actions in place would reinforce the regulation and make it more effective. For example, in the case of fishing pressures, a further look into available data could lead you learn whether there are reported values of inspector visits and enforcement coverage of permitted facilities. Or you could look at reported numbers of enforcement actions in response to non-compliance. Further, you could also see if there are fines that have been paid or exist in association with non-compliance. 9.4.1.4 Data sources Environmental laws and policies offer tangible information on resilience. The most common type of environmental regulations come from administrative law, such as pollution regulation of various kinds. Land-use law is also important to the integration of social and ecosystem issues, so finding zoning laws relevant for coastal areas could be useful, and so could finding whether or not a region requires environmental impact statements before allowing construction for either coastal land or for marine planning. Other kinds of law some countries include court cases settling disputes or requiring reparation of pollution damages, for example. Resilience also goes beyond just the law, however. Insurance policies present another option, for instance. Coastal areas are increasingly requiring climate-related insurance in some countries, and so the existence of such markets in a vulnerable area would be an example of a climate change resilience measure. Social initiatives also present another way to tackle resilience. There might be a beach clean-up day, a percentage of the refuse material that is recycled by the population, or some other social factor that reduces trash inputs into the ocean. A local law banning plastic bags is another way that local jurisdictions control plastic trash. 9.4.1.5 Incorporating local resilience measures in your assessment Begin by exploring how resilience could be measured in your study area. What laws and regulations are in place that could provide resilience to ocean health? Are there locally-developed indices that capture social or ecological resilience? Is there information about how each region in your study area are implementing or enforcing the laws? Evaluate the resilience measures are included in the global assessment. Are all of them relevant? Are there local data that can be substituted in the place of global data? Are there resilience measures that should be excluded entirely? Assign the resilience measure to the appropriate goal. Since resilience measures are in response to pressures that have a weight rank of 2 or 3 effect on a certain goal, determining which goals ecological and social resilience measures effect follows the same pattern as the pressures matrix. For goal-specific resilience measures, assign the resilience measure to the appropriate goal. Prepare each resilience data layer as described in the 7 section only after steps 1-4 are completed. In addition to the proper formatting for the Toolbox, resilience data must be rescaled (normalized) on a unitless scale from 0 - 1. You will have to determine how to rescale the data, whether it is based on the highest value in the data range or other methods (such as using the 95th quantile as your reference point). 9.4.1.6 Including resilience measures from global assessments Remember that local measures are far more appropriate than those included in global assessments, which likely do not reflect local management targets. However, international data were used in the global assessments that are available to you if you cannot find better local data: Table of resilience layers and descriptions layer name alien_species Alien species cites Resilience from commitment to CITES fishing_v1 CBD survey: coastal fishing v1 fishing_v1_eez CBD survey: ocean fishing v1 fishing_v2_eez CBD survey: ocean fishing v2 fishing_v3 CBD survey: coastal fishing v3 fishing_v3_eez CBD survey: ocean fishing v3 habitat CBD survey: habitat habitat_combo CBD survey: coastal habitat habitat_combo_eez CBD survey: ocean habitat li_gci GCI: competitiveness in achieving sustained economic prosperity li_sector_evenness Sector evenness as a measure of economic diversity mariculture CBD survey: mariculture msi_gov MSI sustainability and regulations species_diversity Ocean ecological integrity species_diversity_3nm Coastal ecological integrity tourism CBD survey: tourism water CBD survey: water wgi_all Strength of governance indicated with the WGI CBD = Convention on Biological Diversity; GCI = Global Competitiveness Index; MSI = Mariculture Sustainability Index; WGI = World Governance Indicators. 9.4.2 How to modify Resilience Matrix and Categories in the Toolbox Adding a new resilience layer to the resilience matrix requires the following steps: Create new resilience layer(s) and save in the layers folder Register resilience layer(s) in layers.csv Register resilience layer(s) in resiliences_categories.csv Set the resilience category Set the weights Register resilience layer(s) in resiliences_matrix.csv Identify the goals affected Modify config.R for goals that have elements 9.4.2.1 Create new resilience layers, save in layers folder and register in layers.csv This process is similar to what you have done for the pressures data layers. Prefixes are also used for these layers, see layer and subcategory columns snapshot of the Resilience Categories below for more details. 9.4.2.2 Register in Resilience Categories resilience_categories.csv records general information on each resilience data layer. The full list of layers included in the global resilience matrix are shown in the resilience_matrix.csv: Each resilience layer indicated in the table is a data layer just like all the other data layers you have formatted, saved in the layers folder, and registered on layers.csv. Each layer falls under a category of resilience - ecological or social, and one of three category_type - ecosystem, regulatory, or social, representing the origin of each resilience layer. The subcategory column indicates what specific pressure each layer of resilience is targeted at. The prefix of each data layer corresponds to its subcategory (eg. po, li, g, etc). In addition, the weight column represents level of institutional governance. Governance is a function of 1) institutional structures that address the intended objective (eg. whether appropriate laws/regulations exist, etc), 2) a clear process for implementing the institution is in place, and 3) whether the institution has been effective at meeting stated objectives. At global scales it is very difficult to assess these three elements; we usually only had information on whether institutions exist. However, in some cases we had detailed information on institutions that enabled us to assess whether they would contribute to effective management, and thus, increased ocean health. In those latter cases, we gave more weight to those measures. In the resilience_categories.csv pre-loaded from OHI-Global 2016 to your repository, there are two weights assigned to each layer: 0.5 means that a law or regulation exists, or a country has signed an appropriate treaty 1 means that there are evidence of implementation of the laws and regulations. However, you can redefine how the weights are set to available information in your regions. 9.4.2.3 Register in Resilience Matrix resilience_matrix.csv maps the different types of resilience (columns) with the goals that they affect (rows). Whether a resilience layer has any influence on a goal, or an element of the goal, is represented by an x, or its absence. For example, po_water layer is relevant to the salt marsh element of CP goal, as shown by the x in the cell. On the other hand, that data layer does not apply to the mangrove element of the same goal, hence the absence of an x. New resilience layers may be added to resilience_matrix.csv based on finer-scale local information either in response to a new pressures layer, or as a new independent measure. Any added layer must be associated with a pressures layer that has a weight of 2 or 3 in the OHI framework so that resilience measures can mitigate pressures in each region. 9.4.2.4 How to modify config.r for goals with multiple elements If a goal has multiple elements, as shown in pressures_matrix.csv, you need to update config.r in conf folder, as shown below: "],["calcs-advanced.html", "Chapter 10 Calculations: advanced workflow 10.1 Overview 10.2 Explore goals.csv 10.3 Round 1: Poke at it to see how it works 10.4 Round 2: Break it to see how it works 10.5 Further operations", " Chapter 10 Calculations: advanced workflow In development. The purpose of Chapter 10 is to build off the basic workflow for calculating OHI scores and do a few more advanced things. This is a a 2-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository that is used throughout the this chapter. 10.1 Overview This chapter will show you how to add and remove goals from your assessment. You will be able to use these same principles to turn a subgoal into a goal, or rename goals altogether. The toolbox will calculate goal scores for each goal listed in conf/goals.csv, so investigating and modifying this file will be a big focus of this chapter. As in Chapter 10, it is good practice to rerun calculate_scores.Rmd after modifying these files and and use Git tab in RStudio to check your work. 10.1.1 Prerequisites Before the training, please make sure you have done the following: Have up-to-date versions of R and RStudio and have RStudio configured with Git/GitHub https://cloud.r-project.org http://www.rstudio.com/download http://happygitwithr.com/rstudio-git-github.html Fork the toolbox-demo repository into your own GitHub account by going to https://github.com/OHI-Science/toolbox-demo, clicking “Fork” in the upper right corner, and selecting your account Clone the toolbox-demo repo from your GitHub account into RStudio into a folder called “github” in your home directory (filepath “~/github”) Get comfortable: be set up with two screens if possible. You will be following along in RStudio on your own computer while also watching an instructor’s screen or following this tutorial. Additionally, this chapter assumes you are familiar with content from Chapter 8, so review that first if needed. 10.2 Explore goals.csv goals.csv is the registry for the goals that will be included in OHI calculations. ohicore will use this list and make sure there are functions with the same names in functions.R. This is one of the things that the Toolbox does with the Conf() command, as we will see. goals.csv is inside the conf folder. It is a .csv file has a lot of columns, so it is easier to open and inspect it in Excel or other spreadsheet software. Let’s discuss a few of the columns here (see Chapter 6 for descriptions of all of them): goals.csv has information for how goal scores are calculated, and how information will be visualized and communicated. Let’s focus on this now: Each goal or subgoal has its own row. the “goal” column lists them all If the “goal” column is really a subgoal, then the “parent” column lists the parent or supragoal of that sub-goal 10.3 Round 1: Poke at it to see how it works The Toolbox won’t always give errors when you start changing things (although we are improving that), so let’s just see what some of these things look like. This is when using the Git tab to help you keep track of how things work REALLY helps. We will make modifications in goals.csv and see how that affects the basic calculations workflow from Chapter 10, and then we will do the same with functions.R. 10.3.1 Remove a goal (whole row) in goals.csv For example, delete the entire “LSP” row in the .csv file, and save it. You should see the goals.csv show up in your Git tab in RStudio because the file has been modified. Now, recalculate scores from calculate_scores.Rmd (remember to run Configure Toolbox first to rerun the Conf() function!) What changed? As we see from the Git tab, removing this goal affected scores for three things: “Index” and “SP” scores changed, and “LSP” scores were completely deleted. 10.4 Round 2: Break it to see how it works 10.4.1 Change preindex_function goals.csv it’s the preindex_function column that is critical for the functions. Let’s add a typo there. # Calculating Status and Trend for each region for HAB... # Error in eval(expr, envir, enclos) : could not find function &quot;HA&quot; 10.4.2 Add a new goal in goals.csv Just copy-paste. What do you think will happen? what’s the most important column? That’s right, preindex_function. This will fail at the scores calculation. scores = ohicore::CalculateAll(conf, layers) # Running Setup()... # Calculating Status and Trend for each region for FIS... # ... # ... # Calculating Status and Trend for each region for SPP... # Calculating Status and Trend for each region for EX... # Error in eval(expr, envir, enclos) : could not find function &quot;EX&quot; write.csv(scores, &#39;scores.csv&#39;, na=&#39;&#39;, row.names=F) # Error in is.data.frame(x) : object &#39;scores&#39; not found 10.4.3 Delete a goal model from functions.r won’t fail at Conf, but will at scores calc. # Calculating Status and Trend for each region for AO... # Error in eval(expr, envir, enclos) : could not find function &quot;AO&quot; # ... write.csv(scores, &#39;scores.csv&#39;, na=&#39;&#39;, row.names=F) # Error in is.data.frame(x) : object &#39;scores&#39; not found 10.5 Further operations Please see the OHI Manual to learn more about: Modifying goal models Modifying pressures and resilience Removing goals and sub-goals "],["reporting.html", "Chapter 11 Reporting 11.1 Flower plots", " Chapter 11 Reporting This chapter is under development. 11.1 Flower plots Flower plots draw information from conf/goals.csv. Goal labeling for flower plots is set in goals.csv in the name_flower column. Add a carriage return \\n between words in goal names to have them display on separate lines in the flower plots. "],["websites.html", "Chapter 12 Communication: OHI+ websites 12.1 Overview 12.2 First Observations 12.3 Basic Workflow", " Chapter 12 Communication: OHI+ websites In development. The purpose of Chapter 12 is for you to communicate the technical work you do to wider audiences. This is a a 1-hour hands-on training: you will be following along on your own computer and working with a copy of the demonstration repository that is used throughout the this chapter. 12.1 Overview Your GitHub repository has a free accompanying website that you can use to communicate your work to the audiences you need to reach. You can modify and use this website from the very beginning to identify team members, share workshop agendas, and increasingly, to share the technical decisions underlying your OHI+ assessment, the data, the scores, and what it means. This chapter will teach you how to modify your OHI+ website. These websites are created using RStudio’s R Markdown and hosted on Github. This is a really powerful way to communicate science using the same reproducible workflow you already use for your analyses and collaborations, in this case with OHI. Importantly, creating websites with R Markdown can be done without knowing R or any web-design languages (HTML, CSS, etc), and that’s where we’ll start. However, R Markdown integrates with these tools so the more you know the more complex and beautiful your website can be. This tutorial borrows heavily from Making free websites with RStudio’s R Markdown, but has been augmented to include OHI-specific information. 12.1.1 Prerequisites Before the training, please make sure you have done the following: Have up-to-date versions of R and RStudio and have RStudio configured with Git/GitHub https://cloud.r-project.org http://www.rstudio.com/download http://happygitwithr.com/rstudio-git-github.html Fork the toolbox-demo repository into your own GitHub account by going to https://github.com/OHI-Science/toolbox-demo, clicking “Fork” in the upper right corner, and selecting your account Clone the toolbox-demo repo from your GitHub account into RStudio into a folder called “github” in your home directory (filepath “~/github”) Get comfortable: be set up with two screens if possible. You will be following along in RStudio on your own computer while also watching an instructor’s screen or following this tutorial. Additionally, this chapter assumes you are familiar with content from Chapter 8, so review that first if needed. 12.2 First Observations We will start with a working example website that we will explore together to understand the website architecture. We’ll learn a few rules and look for patterns to get an understanding of what things do. Then we’ll get it onto to our local computers. Locally, we will explore further by going back and forth between the R Markdown editor and built webpages, and make modifications. Pushing to Github will make our modifications live! 12.2.1 Exploring Online Let’s start by looking at the toolbox-demo website, which lives at ohi-science.org/toolbox-demo. 12.2.1.1 The website itself This website has 4 pages: Home About Frequently Asked Questions Who We Are This website is actually a GitHub website, based from the ohi-science organization. Its url is really ohi-science.github.io/toolbox-demo, but we have redirected ohi-science.github.io to the ohi-science.org domain. What this means is that there is a Github repo behind this website, and you can navigate to it because we know the username and repo name: http://ohi-science.github.io/toolbox-demo &lt;=&gt; https://github.com/ohi-science/toolbox-demo 12.2.2 The website’s gh-pages branch Let’s go to https://github.com/ohi-science/toolbox-demo. This looks familiar to you, these are the files in your tailored repository. But that is because we are looking at the master branch. Master is the default branch name, and we haven’t paid attention to branches until now. Click on the master branch, and this will let you select an existing branch, or create a new one. We want to select the existing gh-pages branch, which was created along with your tailored repository. The gh-pages branch - this is critical for building free webpages. You can usually create and name branches whatever you want, but the gh-pages name is special: it means it can be built as a website. (We won’t focus on what branches beyond this in this training, but they are really powerful for collaborative analysis with teams. I think of them like parallel universes). Now let’s look at the filenames. When we switch to the gh_pages branch, we get a whole new set of files. We can recognize the names of the webpages we’ve seen, and there is also a _site.yml file, which is the website’s configuration file. The simplest website possible would have 2 files only: _site.yml and index.Rmd You’ll notice that there are some pages like “scores” and “goals” that exist here but do not show up on the website. We will talk about this more later, but you do not have to include all your pages in the navigation bar. This is nice when pages are under development. 12.2.3 Get the website’s branch on your computer You likely already have forked and cloned the toolbox-demo to your own computer. (If you haven’t done so, follow the prerequisites at the beginning of the chapter). In RStudio, go to the Git Tab. You can click on “master” on the top-right. This will show the local branches that are available to you (only “master”) and also the branches that are available remotely on github.com (“master” and “gh-pages”). To be able to switch between branches nicely like we were able to from GitHub.com, we need to bring the remote gh-pages branch locally. We need to do a one-time setup, and we will do this from the command line, also called the Terminal. Luckily, the newest versions of RStudio have a terminal available from within RStudio, so let’s take advantage of this. First, click on terminal. Second, type git checkout gh-pages. Third, see that you are now on the gh-pages branch, with the ability to switch between them by clicking. You will need to save, commit, and push your work before switching. You’ll also see that the file pane now has all of the gh-pages files! Note: if you had a file from the master branch open in your RStudio editor, you may get a message saying that this file has been deleted, should you close it? This can be alarming, but remember that file does not exist in this gh-pages branch. We are in a different space (a different parallel universe) and that file is not here. It’s OK to close it, it still exists in the master branch (you can go to github.com and check out the master branch to confirm!) Now, we can start exploring and editing our website! 12.3 Basic Workflow Until this is developed, please see the basic workflow chapter from the “Making free websites with RStudio’s R Markdown” tutorial. And practice committing, pushing, and switching branches back to master! RStudio will remind you to pull when you switch branches if need be. "]]
